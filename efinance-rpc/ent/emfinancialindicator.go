// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emfinancialindicator"
)

// EmFinancialIndicator is the model entity for the EmFinancialIndicator schema.
type EmFinancialIndicator struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// FinancialIndicatorsKey holds the value of the "financial_indicators_key" field.
	FinancialIndicatorsKey string `json:"financial_indicators_key,omitempty"`
	// FinancialIndicatorsValue holds the value of the "financial_indicators_value" field.
	FinancialIndicatorsValue string `json:"financial_indicators_value,omitempty"`
	// FinancialIndicatorsName holds the value of the "financial_indicators_name" field.
	FinancialIndicatorsName string `json:"financial_indicators_name,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// Status holds the value of the "status" field.
	Status       string `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmFinancialIndicator) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emfinancialindicator.FieldID:
			values[i] = new(sql.NullInt64)
		case emfinancialindicator.FieldFinancialIndicatorsKey, emfinancialindicator.FieldFinancialIndicatorsValue, emfinancialindicator.FieldFinancialIndicatorsName, emfinancialindicator.FieldRemarks, emfinancialindicator.FieldStatus:
			values[i] = new(sql.NullString)
		case emfinancialindicator.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmFinancialIndicator fields.
func (efi *EmFinancialIndicator) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emfinancialindicator.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			efi.ID = int32(value.Int64)
		case emfinancialindicator.FieldFinancialIndicatorsKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field financial_indicators_key", values[i])
			} else if value.Valid {
				efi.FinancialIndicatorsKey = value.String
			}
		case emfinancialindicator.FieldFinancialIndicatorsValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field financial_indicators_value", values[i])
			} else if value.Valid {
				efi.FinancialIndicatorsValue = value.String
			}
		case emfinancialindicator.FieldFinancialIndicatorsName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field financial_indicators_name", values[i])
			} else if value.Valid {
				efi.FinancialIndicatorsName = value.String
			}
		case emfinancialindicator.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				efi.CreateTime = value.Time
			}
		case emfinancialindicator.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				efi.Remarks = value.String
			}
		case emfinancialindicator.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				efi.Status = value.String
			}
		default:
			efi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmFinancialIndicator.
// This includes values selected through modifiers, order, etc.
func (efi *EmFinancialIndicator) Value(name string) (ent.Value, error) {
	return efi.selectValues.Get(name)
}

// Update returns a builder for updating this EmFinancialIndicator.
// Note that you need to call EmFinancialIndicator.Unwrap() before calling this method if this EmFinancialIndicator
// was returned from a transaction, and the transaction was committed or rolled back.
func (efi *EmFinancialIndicator) Update() *EmFinancialIndicatorUpdateOne {
	return NewEmFinancialIndicatorClient(efi.config).UpdateOne(efi)
}

// Unwrap unwraps the EmFinancialIndicator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (efi *EmFinancialIndicator) Unwrap() *EmFinancialIndicator {
	_tx, ok := efi.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmFinancialIndicator is not a transactional entity")
	}
	efi.config.driver = _tx.drv
	return efi
}

// String implements the fmt.Stringer.
func (efi *EmFinancialIndicator) String() string {
	var builder strings.Builder
	builder.WriteString("EmFinancialIndicator(")
	builder.WriteString(fmt.Sprintf("id=%v, ", efi.ID))
	builder.WriteString("financial_indicators_key=")
	builder.WriteString(efi.FinancialIndicatorsKey)
	builder.WriteString(", ")
	builder.WriteString("financial_indicators_value=")
	builder.WriteString(efi.FinancialIndicatorsValue)
	builder.WriteString(", ")
	builder.WriteString("financial_indicators_name=")
	builder.WriteString(efi.FinancialIndicatorsName)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(efi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(efi.Remarks)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(efi.Status)
	builder.WriteByte(')')
	return builder.String()
}

// EmFinancialIndicators is a parsable slice of EmFinancialIndicator.
type EmFinancialIndicators []*EmFinancialIndicator
