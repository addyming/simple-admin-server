// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emfinancialindicator"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emstockbasicinfo"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emstockwatch"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEmFinancialIndicator = "EmFinancialIndicator"
	TypeEmStockBasicInfo     = "EmStockBasicInfo"
	TypeEmStockWatch         = "EmStockWatch"
)

// EmFinancialIndicatorMutation represents an operation that mutates the EmFinancialIndicator nodes in the graph.
type EmFinancialIndicatorMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int32
	financial_indicators_key   *string
	financial_indicators_value *string
	financial_indicators_name  *string
	create_time                *time.Time
	remarks                    *string
	status                     *string
	clearedFields              map[string]struct{}
	done                       bool
	oldValue                   func(context.Context) (*EmFinancialIndicator, error)
	predicates                 []predicate.EmFinancialIndicator
}

var _ ent.Mutation = (*EmFinancialIndicatorMutation)(nil)

// emfinancialindicatorOption allows management of the mutation configuration using functional options.
type emfinancialindicatorOption func(*EmFinancialIndicatorMutation)

// newEmFinancialIndicatorMutation creates new mutation for the EmFinancialIndicator entity.
func newEmFinancialIndicatorMutation(c config, op Op, opts ...emfinancialindicatorOption) *EmFinancialIndicatorMutation {
	m := &EmFinancialIndicatorMutation{
		config:        c,
		op:            op,
		typ:           TypeEmFinancialIndicator,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmFinancialIndicatorID sets the ID field of the mutation.
func withEmFinancialIndicatorID(id int32) emfinancialindicatorOption {
	return func(m *EmFinancialIndicatorMutation) {
		var (
			err   error
			once  sync.Once
			value *EmFinancialIndicator
		)
		m.oldValue = func(ctx context.Context) (*EmFinancialIndicator, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmFinancialIndicator.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmFinancialIndicator sets the old EmFinancialIndicator of the mutation.
func withEmFinancialIndicator(node *EmFinancialIndicator) emfinancialindicatorOption {
	return func(m *EmFinancialIndicatorMutation) {
		m.oldValue = func(context.Context) (*EmFinancialIndicator, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmFinancialIndicatorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmFinancialIndicatorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EmFinancialIndicator entities.
func (m *EmFinancialIndicatorMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmFinancialIndicatorMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmFinancialIndicatorMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EmFinancialIndicator.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFinancialIndicatorsKey sets the "financial_indicators_key" field.
func (m *EmFinancialIndicatorMutation) SetFinancialIndicatorsKey(s string) {
	m.financial_indicators_key = &s
}

// FinancialIndicatorsKey returns the value of the "financial_indicators_key" field in the mutation.
func (m *EmFinancialIndicatorMutation) FinancialIndicatorsKey() (r string, exists bool) {
	v := m.financial_indicators_key
	if v == nil {
		return
	}
	return *v, true
}

// OldFinancialIndicatorsKey returns the old "financial_indicators_key" field's value of the EmFinancialIndicator entity.
// If the EmFinancialIndicator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmFinancialIndicatorMutation) OldFinancialIndicatorsKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinancialIndicatorsKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinancialIndicatorsKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinancialIndicatorsKey: %w", err)
	}
	return oldValue.FinancialIndicatorsKey, nil
}

// ClearFinancialIndicatorsKey clears the value of the "financial_indicators_key" field.
func (m *EmFinancialIndicatorMutation) ClearFinancialIndicatorsKey() {
	m.financial_indicators_key = nil
	m.clearedFields[emfinancialindicator.FieldFinancialIndicatorsKey] = struct{}{}
}

// FinancialIndicatorsKeyCleared returns if the "financial_indicators_key" field was cleared in this mutation.
func (m *EmFinancialIndicatorMutation) FinancialIndicatorsKeyCleared() bool {
	_, ok := m.clearedFields[emfinancialindicator.FieldFinancialIndicatorsKey]
	return ok
}

// ResetFinancialIndicatorsKey resets all changes to the "financial_indicators_key" field.
func (m *EmFinancialIndicatorMutation) ResetFinancialIndicatorsKey() {
	m.financial_indicators_key = nil
	delete(m.clearedFields, emfinancialindicator.FieldFinancialIndicatorsKey)
}

// SetFinancialIndicatorsValue sets the "financial_indicators_value" field.
func (m *EmFinancialIndicatorMutation) SetFinancialIndicatorsValue(s string) {
	m.financial_indicators_value = &s
}

// FinancialIndicatorsValue returns the value of the "financial_indicators_value" field in the mutation.
func (m *EmFinancialIndicatorMutation) FinancialIndicatorsValue() (r string, exists bool) {
	v := m.financial_indicators_value
	if v == nil {
		return
	}
	return *v, true
}

// OldFinancialIndicatorsValue returns the old "financial_indicators_value" field's value of the EmFinancialIndicator entity.
// If the EmFinancialIndicator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmFinancialIndicatorMutation) OldFinancialIndicatorsValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinancialIndicatorsValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinancialIndicatorsValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinancialIndicatorsValue: %w", err)
	}
	return oldValue.FinancialIndicatorsValue, nil
}

// ClearFinancialIndicatorsValue clears the value of the "financial_indicators_value" field.
func (m *EmFinancialIndicatorMutation) ClearFinancialIndicatorsValue() {
	m.financial_indicators_value = nil
	m.clearedFields[emfinancialindicator.FieldFinancialIndicatorsValue] = struct{}{}
}

// FinancialIndicatorsValueCleared returns if the "financial_indicators_value" field was cleared in this mutation.
func (m *EmFinancialIndicatorMutation) FinancialIndicatorsValueCleared() bool {
	_, ok := m.clearedFields[emfinancialindicator.FieldFinancialIndicatorsValue]
	return ok
}

// ResetFinancialIndicatorsValue resets all changes to the "financial_indicators_value" field.
func (m *EmFinancialIndicatorMutation) ResetFinancialIndicatorsValue() {
	m.financial_indicators_value = nil
	delete(m.clearedFields, emfinancialindicator.FieldFinancialIndicatorsValue)
}

// SetFinancialIndicatorsName sets the "financial_indicators_name" field.
func (m *EmFinancialIndicatorMutation) SetFinancialIndicatorsName(s string) {
	m.financial_indicators_name = &s
}

// FinancialIndicatorsName returns the value of the "financial_indicators_name" field in the mutation.
func (m *EmFinancialIndicatorMutation) FinancialIndicatorsName() (r string, exists bool) {
	v := m.financial_indicators_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFinancialIndicatorsName returns the old "financial_indicators_name" field's value of the EmFinancialIndicator entity.
// If the EmFinancialIndicator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmFinancialIndicatorMutation) OldFinancialIndicatorsName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinancialIndicatorsName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinancialIndicatorsName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinancialIndicatorsName: %w", err)
	}
	return oldValue.FinancialIndicatorsName, nil
}

// ClearFinancialIndicatorsName clears the value of the "financial_indicators_name" field.
func (m *EmFinancialIndicatorMutation) ClearFinancialIndicatorsName() {
	m.financial_indicators_name = nil
	m.clearedFields[emfinancialindicator.FieldFinancialIndicatorsName] = struct{}{}
}

// FinancialIndicatorsNameCleared returns if the "financial_indicators_name" field was cleared in this mutation.
func (m *EmFinancialIndicatorMutation) FinancialIndicatorsNameCleared() bool {
	_, ok := m.clearedFields[emfinancialindicator.FieldFinancialIndicatorsName]
	return ok
}

// ResetFinancialIndicatorsName resets all changes to the "financial_indicators_name" field.
func (m *EmFinancialIndicatorMutation) ResetFinancialIndicatorsName() {
	m.financial_indicators_name = nil
	delete(m.clearedFields, emfinancialindicator.FieldFinancialIndicatorsName)
}

// SetCreateTime sets the "create_time" field.
func (m *EmFinancialIndicatorMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *EmFinancialIndicatorMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the EmFinancialIndicator entity.
// If the EmFinancialIndicator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmFinancialIndicatorMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "create_time" field.
func (m *EmFinancialIndicatorMutation) ClearCreateTime() {
	m.create_time = nil
	m.clearedFields[emfinancialindicator.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "create_time" field was cleared in this mutation.
func (m *EmFinancialIndicatorMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[emfinancialindicator.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *EmFinancialIndicatorMutation) ResetCreateTime() {
	m.create_time = nil
	delete(m.clearedFields, emfinancialindicator.FieldCreateTime)
}

// SetRemarks sets the "remarks" field.
func (m *EmFinancialIndicatorMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the value of the "remarks" field in the mutation.
func (m *EmFinancialIndicatorMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old "remarks" field's value of the EmFinancialIndicator entity.
// If the EmFinancialIndicator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmFinancialIndicatorMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemarks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ClearRemarks clears the value of the "remarks" field.
func (m *EmFinancialIndicatorMutation) ClearRemarks() {
	m.remarks = nil
	m.clearedFields[emfinancialindicator.FieldRemarks] = struct{}{}
}

// RemarksCleared returns if the "remarks" field was cleared in this mutation.
func (m *EmFinancialIndicatorMutation) RemarksCleared() bool {
	_, ok := m.clearedFields[emfinancialindicator.FieldRemarks]
	return ok
}

// ResetRemarks resets all changes to the "remarks" field.
func (m *EmFinancialIndicatorMutation) ResetRemarks() {
	m.remarks = nil
	delete(m.clearedFields, emfinancialindicator.FieldRemarks)
}

// SetStatus sets the "status" field.
func (m *EmFinancialIndicatorMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *EmFinancialIndicatorMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the EmFinancialIndicator entity.
// If the EmFinancialIndicator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmFinancialIndicatorMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *EmFinancialIndicatorMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[emfinancialindicator.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *EmFinancialIndicatorMutation) StatusCleared() bool {
	_, ok := m.clearedFields[emfinancialindicator.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *EmFinancialIndicatorMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, emfinancialindicator.FieldStatus)
}

// Where appends a list predicates to the EmFinancialIndicatorMutation builder.
func (m *EmFinancialIndicatorMutation) Where(ps ...predicate.EmFinancialIndicator) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmFinancialIndicatorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmFinancialIndicatorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EmFinancialIndicator, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmFinancialIndicatorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmFinancialIndicatorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EmFinancialIndicator).
func (m *EmFinancialIndicatorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmFinancialIndicatorMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.financial_indicators_key != nil {
		fields = append(fields, emfinancialindicator.FieldFinancialIndicatorsKey)
	}
	if m.financial_indicators_value != nil {
		fields = append(fields, emfinancialindicator.FieldFinancialIndicatorsValue)
	}
	if m.financial_indicators_name != nil {
		fields = append(fields, emfinancialindicator.FieldFinancialIndicatorsName)
	}
	if m.create_time != nil {
		fields = append(fields, emfinancialindicator.FieldCreateTime)
	}
	if m.remarks != nil {
		fields = append(fields, emfinancialindicator.FieldRemarks)
	}
	if m.status != nil {
		fields = append(fields, emfinancialindicator.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmFinancialIndicatorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emfinancialindicator.FieldFinancialIndicatorsKey:
		return m.FinancialIndicatorsKey()
	case emfinancialindicator.FieldFinancialIndicatorsValue:
		return m.FinancialIndicatorsValue()
	case emfinancialindicator.FieldFinancialIndicatorsName:
		return m.FinancialIndicatorsName()
	case emfinancialindicator.FieldCreateTime:
		return m.CreateTime()
	case emfinancialindicator.FieldRemarks:
		return m.Remarks()
	case emfinancialindicator.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmFinancialIndicatorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emfinancialindicator.FieldFinancialIndicatorsKey:
		return m.OldFinancialIndicatorsKey(ctx)
	case emfinancialindicator.FieldFinancialIndicatorsValue:
		return m.OldFinancialIndicatorsValue(ctx)
	case emfinancialindicator.FieldFinancialIndicatorsName:
		return m.OldFinancialIndicatorsName(ctx)
	case emfinancialindicator.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case emfinancialindicator.FieldRemarks:
		return m.OldRemarks(ctx)
	case emfinancialindicator.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown EmFinancialIndicator field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmFinancialIndicatorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emfinancialindicator.FieldFinancialIndicatorsKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinancialIndicatorsKey(v)
		return nil
	case emfinancialindicator.FieldFinancialIndicatorsValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinancialIndicatorsValue(v)
		return nil
	case emfinancialindicator.FieldFinancialIndicatorsName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinancialIndicatorsName(v)
		return nil
	case emfinancialindicator.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case emfinancialindicator.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case emfinancialindicator.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown EmFinancialIndicator field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmFinancialIndicatorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmFinancialIndicatorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmFinancialIndicatorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EmFinancialIndicator numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmFinancialIndicatorMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(emfinancialindicator.FieldFinancialIndicatorsKey) {
		fields = append(fields, emfinancialindicator.FieldFinancialIndicatorsKey)
	}
	if m.FieldCleared(emfinancialindicator.FieldFinancialIndicatorsValue) {
		fields = append(fields, emfinancialindicator.FieldFinancialIndicatorsValue)
	}
	if m.FieldCleared(emfinancialindicator.FieldFinancialIndicatorsName) {
		fields = append(fields, emfinancialindicator.FieldFinancialIndicatorsName)
	}
	if m.FieldCleared(emfinancialindicator.FieldCreateTime) {
		fields = append(fields, emfinancialindicator.FieldCreateTime)
	}
	if m.FieldCleared(emfinancialindicator.FieldRemarks) {
		fields = append(fields, emfinancialindicator.FieldRemarks)
	}
	if m.FieldCleared(emfinancialindicator.FieldStatus) {
		fields = append(fields, emfinancialindicator.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmFinancialIndicatorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmFinancialIndicatorMutation) ClearField(name string) error {
	switch name {
	case emfinancialindicator.FieldFinancialIndicatorsKey:
		m.ClearFinancialIndicatorsKey()
		return nil
	case emfinancialindicator.FieldFinancialIndicatorsValue:
		m.ClearFinancialIndicatorsValue()
		return nil
	case emfinancialindicator.FieldFinancialIndicatorsName:
		m.ClearFinancialIndicatorsName()
		return nil
	case emfinancialindicator.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case emfinancialindicator.FieldRemarks:
		m.ClearRemarks()
		return nil
	case emfinancialindicator.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown EmFinancialIndicator nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmFinancialIndicatorMutation) ResetField(name string) error {
	switch name {
	case emfinancialindicator.FieldFinancialIndicatorsKey:
		m.ResetFinancialIndicatorsKey()
		return nil
	case emfinancialindicator.FieldFinancialIndicatorsValue:
		m.ResetFinancialIndicatorsValue()
		return nil
	case emfinancialindicator.FieldFinancialIndicatorsName:
		m.ResetFinancialIndicatorsName()
		return nil
	case emfinancialindicator.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case emfinancialindicator.FieldRemarks:
		m.ResetRemarks()
		return nil
	case emfinancialindicator.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown EmFinancialIndicator field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmFinancialIndicatorMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmFinancialIndicatorMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmFinancialIndicatorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmFinancialIndicatorMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmFinancialIndicatorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmFinancialIndicatorMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmFinancialIndicatorMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EmFinancialIndicator unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmFinancialIndicatorMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EmFinancialIndicator edge %s", name)
}

// EmStockBasicInfoMutation represents an operation that mutates the EmStockBasicInfo nodes in the graph.
type EmStockBasicInfoMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	f1            *string
	f2            *string
	f3            *string
	f4            *string
	f5            *string
	f6            *string
	f7            *string
	f8            *string
	f9            *string
	f10           *string
	f11           *string
	f12           *string
	f13           *string
	f14           *string
	f15           *string
	f16           *string
	f17           *string
	f18           *string
	f19           *string
	f20           *string
	f21           *string
	f22           *string
	f23           *string
	f24           *string
	f25           *string
	f26           *string
	f27           *string
	f28           *string
	f29           *string
	f30           *string
	create_time   *time.Time
	remarks       *string
	status        *string
	st1           *int32
	addst1        *int32
	st2           *int32
	addst2        *int32
	st3           *int32
	addst3        *int32
	st4           *int32
	addst4        *int32
	st5           *int32
	addst5        *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EmStockBasicInfo, error)
	predicates    []predicate.EmStockBasicInfo
}

var _ ent.Mutation = (*EmStockBasicInfoMutation)(nil)

// emstockbasicinfoOption allows management of the mutation configuration using functional options.
type emstockbasicinfoOption func(*EmStockBasicInfoMutation)

// newEmStockBasicInfoMutation creates new mutation for the EmStockBasicInfo entity.
func newEmStockBasicInfoMutation(c config, op Op, opts ...emstockbasicinfoOption) *EmStockBasicInfoMutation {
	m := &EmStockBasicInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeEmStockBasicInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmStockBasicInfoID sets the ID field of the mutation.
func withEmStockBasicInfoID(id int32) emstockbasicinfoOption {
	return func(m *EmStockBasicInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *EmStockBasicInfo
		)
		m.oldValue = func(ctx context.Context) (*EmStockBasicInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmStockBasicInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmStockBasicInfo sets the old EmStockBasicInfo of the mutation.
func withEmStockBasicInfo(node *EmStockBasicInfo) emstockbasicinfoOption {
	return func(m *EmStockBasicInfoMutation) {
		m.oldValue = func(context.Context) (*EmStockBasicInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmStockBasicInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmStockBasicInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EmStockBasicInfo entities.
func (m *EmStockBasicInfoMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmStockBasicInfoMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmStockBasicInfoMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EmStockBasicInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetF1 sets the "f1" field.
func (m *EmStockBasicInfoMutation) SetF1(s string) {
	m.f1 = &s
}

// F1 returns the value of the "f1" field in the mutation.
func (m *EmStockBasicInfoMutation) F1() (r string, exists bool) {
	v := m.f1
	if v == nil {
		return
	}
	return *v, true
}

// OldF1 returns the old "f1" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF1: %w", err)
	}
	return oldValue.F1, nil
}

// ClearF1 clears the value of the "f1" field.
func (m *EmStockBasicInfoMutation) ClearF1() {
	m.f1 = nil
	m.clearedFields[emstockbasicinfo.FieldF1] = struct{}{}
}

// F1Cleared returns if the "f1" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F1Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF1]
	return ok
}

// ResetF1 resets all changes to the "f1" field.
func (m *EmStockBasicInfoMutation) ResetF1() {
	m.f1 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF1)
}

// SetF2 sets the "f2" field.
func (m *EmStockBasicInfoMutation) SetF2(s string) {
	m.f2 = &s
}

// F2 returns the value of the "f2" field in the mutation.
func (m *EmStockBasicInfoMutation) F2() (r string, exists bool) {
	v := m.f2
	if v == nil {
		return
	}
	return *v, true
}

// OldF2 returns the old "f2" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF2: %w", err)
	}
	return oldValue.F2, nil
}

// ClearF2 clears the value of the "f2" field.
func (m *EmStockBasicInfoMutation) ClearF2() {
	m.f2 = nil
	m.clearedFields[emstockbasicinfo.FieldF2] = struct{}{}
}

// F2Cleared returns if the "f2" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F2Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF2]
	return ok
}

// ResetF2 resets all changes to the "f2" field.
func (m *EmStockBasicInfoMutation) ResetF2() {
	m.f2 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF2)
}

// SetF3 sets the "f3" field.
func (m *EmStockBasicInfoMutation) SetF3(s string) {
	m.f3 = &s
}

// F3 returns the value of the "f3" field in the mutation.
func (m *EmStockBasicInfoMutation) F3() (r string, exists bool) {
	v := m.f3
	if v == nil {
		return
	}
	return *v, true
}

// OldF3 returns the old "f3" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF3: %w", err)
	}
	return oldValue.F3, nil
}

// ClearF3 clears the value of the "f3" field.
func (m *EmStockBasicInfoMutation) ClearF3() {
	m.f3 = nil
	m.clearedFields[emstockbasicinfo.FieldF3] = struct{}{}
}

// F3Cleared returns if the "f3" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F3Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF3]
	return ok
}

// ResetF3 resets all changes to the "f3" field.
func (m *EmStockBasicInfoMutation) ResetF3() {
	m.f3 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF3)
}

// SetF4 sets the "f4" field.
func (m *EmStockBasicInfoMutation) SetF4(s string) {
	m.f4 = &s
}

// F4 returns the value of the "f4" field in the mutation.
func (m *EmStockBasicInfoMutation) F4() (r string, exists bool) {
	v := m.f4
	if v == nil {
		return
	}
	return *v, true
}

// OldF4 returns the old "f4" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF4: %w", err)
	}
	return oldValue.F4, nil
}

// ClearF4 clears the value of the "f4" field.
func (m *EmStockBasicInfoMutation) ClearF4() {
	m.f4 = nil
	m.clearedFields[emstockbasicinfo.FieldF4] = struct{}{}
}

// F4Cleared returns if the "f4" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F4Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF4]
	return ok
}

// ResetF4 resets all changes to the "f4" field.
func (m *EmStockBasicInfoMutation) ResetF4() {
	m.f4 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF4)
}

// SetF5 sets the "f5" field.
func (m *EmStockBasicInfoMutation) SetF5(s string) {
	m.f5 = &s
}

// F5 returns the value of the "f5" field in the mutation.
func (m *EmStockBasicInfoMutation) F5() (r string, exists bool) {
	v := m.f5
	if v == nil {
		return
	}
	return *v, true
}

// OldF5 returns the old "f5" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF5: %w", err)
	}
	return oldValue.F5, nil
}

// ClearF5 clears the value of the "f5" field.
func (m *EmStockBasicInfoMutation) ClearF5() {
	m.f5 = nil
	m.clearedFields[emstockbasicinfo.FieldF5] = struct{}{}
}

// F5Cleared returns if the "f5" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F5Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF5]
	return ok
}

// ResetF5 resets all changes to the "f5" field.
func (m *EmStockBasicInfoMutation) ResetF5() {
	m.f5 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF5)
}

// SetF6 sets the "f6" field.
func (m *EmStockBasicInfoMutation) SetF6(s string) {
	m.f6 = &s
}

// F6 returns the value of the "f6" field in the mutation.
func (m *EmStockBasicInfoMutation) F6() (r string, exists bool) {
	v := m.f6
	if v == nil {
		return
	}
	return *v, true
}

// OldF6 returns the old "f6" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF6(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF6: %w", err)
	}
	return oldValue.F6, nil
}

// ClearF6 clears the value of the "f6" field.
func (m *EmStockBasicInfoMutation) ClearF6() {
	m.f6 = nil
	m.clearedFields[emstockbasicinfo.FieldF6] = struct{}{}
}

// F6Cleared returns if the "f6" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F6Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF6]
	return ok
}

// ResetF6 resets all changes to the "f6" field.
func (m *EmStockBasicInfoMutation) ResetF6() {
	m.f6 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF6)
}

// SetF7 sets the "f7" field.
func (m *EmStockBasicInfoMutation) SetF7(s string) {
	m.f7 = &s
}

// F7 returns the value of the "f7" field in the mutation.
func (m *EmStockBasicInfoMutation) F7() (r string, exists bool) {
	v := m.f7
	if v == nil {
		return
	}
	return *v, true
}

// OldF7 returns the old "f7" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF7(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF7 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF7 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF7: %w", err)
	}
	return oldValue.F7, nil
}

// ClearF7 clears the value of the "f7" field.
func (m *EmStockBasicInfoMutation) ClearF7() {
	m.f7 = nil
	m.clearedFields[emstockbasicinfo.FieldF7] = struct{}{}
}

// F7Cleared returns if the "f7" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F7Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF7]
	return ok
}

// ResetF7 resets all changes to the "f7" field.
func (m *EmStockBasicInfoMutation) ResetF7() {
	m.f7 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF7)
}

// SetF8 sets the "f8" field.
func (m *EmStockBasicInfoMutation) SetF8(s string) {
	m.f8 = &s
}

// F8 returns the value of the "f8" field in the mutation.
func (m *EmStockBasicInfoMutation) F8() (r string, exists bool) {
	v := m.f8
	if v == nil {
		return
	}
	return *v, true
}

// OldF8 returns the old "f8" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF8(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF8 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF8 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF8: %w", err)
	}
	return oldValue.F8, nil
}

// ClearF8 clears the value of the "f8" field.
func (m *EmStockBasicInfoMutation) ClearF8() {
	m.f8 = nil
	m.clearedFields[emstockbasicinfo.FieldF8] = struct{}{}
}

// F8Cleared returns if the "f8" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F8Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF8]
	return ok
}

// ResetF8 resets all changes to the "f8" field.
func (m *EmStockBasicInfoMutation) ResetF8() {
	m.f8 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF8)
}

// SetF9 sets the "f9" field.
func (m *EmStockBasicInfoMutation) SetF9(s string) {
	m.f9 = &s
}

// F9 returns the value of the "f9" field in the mutation.
func (m *EmStockBasicInfoMutation) F9() (r string, exists bool) {
	v := m.f9
	if v == nil {
		return
	}
	return *v, true
}

// OldF9 returns the old "f9" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF9(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF9 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF9 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF9: %w", err)
	}
	return oldValue.F9, nil
}

// ClearF9 clears the value of the "f9" field.
func (m *EmStockBasicInfoMutation) ClearF9() {
	m.f9 = nil
	m.clearedFields[emstockbasicinfo.FieldF9] = struct{}{}
}

// F9Cleared returns if the "f9" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F9Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF9]
	return ok
}

// ResetF9 resets all changes to the "f9" field.
func (m *EmStockBasicInfoMutation) ResetF9() {
	m.f9 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF9)
}

// SetF10 sets the "f10" field.
func (m *EmStockBasicInfoMutation) SetF10(s string) {
	m.f10 = &s
}

// F10 returns the value of the "f10" field in the mutation.
func (m *EmStockBasicInfoMutation) F10() (r string, exists bool) {
	v := m.f10
	if v == nil {
		return
	}
	return *v, true
}

// OldF10 returns the old "f10" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF10(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF10 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF10 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF10: %w", err)
	}
	return oldValue.F10, nil
}

// ClearF10 clears the value of the "f10" field.
func (m *EmStockBasicInfoMutation) ClearF10() {
	m.f10 = nil
	m.clearedFields[emstockbasicinfo.FieldF10] = struct{}{}
}

// F10Cleared returns if the "f10" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F10Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF10]
	return ok
}

// ResetF10 resets all changes to the "f10" field.
func (m *EmStockBasicInfoMutation) ResetF10() {
	m.f10 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF10)
}

// SetF11 sets the "f11" field.
func (m *EmStockBasicInfoMutation) SetF11(s string) {
	m.f11 = &s
}

// F11 returns the value of the "f11" field in the mutation.
func (m *EmStockBasicInfoMutation) F11() (r string, exists bool) {
	v := m.f11
	if v == nil {
		return
	}
	return *v, true
}

// OldF11 returns the old "f11" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF11(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF11 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF11 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF11: %w", err)
	}
	return oldValue.F11, nil
}

// ClearF11 clears the value of the "f11" field.
func (m *EmStockBasicInfoMutation) ClearF11() {
	m.f11 = nil
	m.clearedFields[emstockbasicinfo.FieldF11] = struct{}{}
}

// F11Cleared returns if the "f11" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F11Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF11]
	return ok
}

// ResetF11 resets all changes to the "f11" field.
func (m *EmStockBasicInfoMutation) ResetF11() {
	m.f11 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF11)
}

// SetF12 sets the "f12" field.
func (m *EmStockBasicInfoMutation) SetF12(s string) {
	m.f12 = &s
}

// F12 returns the value of the "f12" field in the mutation.
func (m *EmStockBasicInfoMutation) F12() (r string, exists bool) {
	v := m.f12
	if v == nil {
		return
	}
	return *v, true
}

// OldF12 returns the old "f12" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF12(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF12 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF12 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF12: %w", err)
	}
	return oldValue.F12, nil
}

// ClearF12 clears the value of the "f12" field.
func (m *EmStockBasicInfoMutation) ClearF12() {
	m.f12 = nil
	m.clearedFields[emstockbasicinfo.FieldF12] = struct{}{}
}

// F12Cleared returns if the "f12" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F12Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF12]
	return ok
}

// ResetF12 resets all changes to the "f12" field.
func (m *EmStockBasicInfoMutation) ResetF12() {
	m.f12 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF12)
}

// SetF13 sets the "f13" field.
func (m *EmStockBasicInfoMutation) SetF13(s string) {
	m.f13 = &s
}

// F13 returns the value of the "f13" field in the mutation.
func (m *EmStockBasicInfoMutation) F13() (r string, exists bool) {
	v := m.f13
	if v == nil {
		return
	}
	return *v, true
}

// OldF13 returns the old "f13" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF13(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF13 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF13 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF13: %w", err)
	}
	return oldValue.F13, nil
}

// ClearF13 clears the value of the "f13" field.
func (m *EmStockBasicInfoMutation) ClearF13() {
	m.f13 = nil
	m.clearedFields[emstockbasicinfo.FieldF13] = struct{}{}
}

// F13Cleared returns if the "f13" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F13Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF13]
	return ok
}

// ResetF13 resets all changes to the "f13" field.
func (m *EmStockBasicInfoMutation) ResetF13() {
	m.f13 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF13)
}

// SetF14 sets the "f14" field.
func (m *EmStockBasicInfoMutation) SetF14(s string) {
	m.f14 = &s
}

// F14 returns the value of the "f14" field in the mutation.
func (m *EmStockBasicInfoMutation) F14() (r string, exists bool) {
	v := m.f14
	if v == nil {
		return
	}
	return *v, true
}

// OldF14 returns the old "f14" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF14(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF14 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF14 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF14: %w", err)
	}
	return oldValue.F14, nil
}

// ClearF14 clears the value of the "f14" field.
func (m *EmStockBasicInfoMutation) ClearF14() {
	m.f14 = nil
	m.clearedFields[emstockbasicinfo.FieldF14] = struct{}{}
}

// F14Cleared returns if the "f14" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F14Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF14]
	return ok
}

// ResetF14 resets all changes to the "f14" field.
func (m *EmStockBasicInfoMutation) ResetF14() {
	m.f14 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF14)
}

// SetF15 sets the "f15" field.
func (m *EmStockBasicInfoMutation) SetF15(s string) {
	m.f15 = &s
}

// F15 returns the value of the "f15" field in the mutation.
func (m *EmStockBasicInfoMutation) F15() (r string, exists bool) {
	v := m.f15
	if v == nil {
		return
	}
	return *v, true
}

// OldF15 returns the old "f15" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF15(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF15 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF15 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF15: %w", err)
	}
	return oldValue.F15, nil
}

// ClearF15 clears the value of the "f15" field.
func (m *EmStockBasicInfoMutation) ClearF15() {
	m.f15 = nil
	m.clearedFields[emstockbasicinfo.FieldF15] = struct{}{}
}

// F15Cleared returns if the "f15" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F15Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF15]
	return ok
}

// ResetF15 resets all changes to the "f15" field.
func (m *EmStockBasicInfoMutation) ResetF15() {
	m.f15 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF15)
}

// SetF16 sets the "f16" field.
func (m *EmStockBasicInfoMutation) SetF16(s string) {
	m.f16 = &s
}

// F16 returns the value of the "f16" field in the mutation.
func (m *EmStockBasicInfoMutation) F16() (r string, exists bool) {
	v := m.f16
	if v == nil {
		return
	}
	return *v, true
}

// OldF16 returns the old "f16" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF16(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF16 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF16 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF16: %w", err)
	}
	return oldValue.F16, nil
}

// ClearF16 clears the value of the "f16" field.
func (m *EmStockBasicInfoMutation) ClearF16() {
	m.f16 = nil
	m.clearedFields[emstockbasicinfo.FieldF16] = struct{}{}
}

// F16Cleared returns if the "f16" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F16Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF16]
	return ok
}

// ResetF16 resets all changes to the "f16" field.
func (m *EmStockBasicInfoMutation) ResetF16() {
	m.f16 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF16)
}

// SetF17 sets the "f17" field.
func (m *EmStockBasicInfoMutation) SetF17(s string) {
	m.f17 = &s
}

// F17 returns the value of the "f17" field in the mutation.
func (m *EmStockBasicInfoMutation) F17() (r string, exists bool) {
	v := m.f17
	if v == nil {
		return
	}
	return *v, true
}

// OldF17 returns the old "f17" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF17(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF17 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF17 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF17: %w", err)
	}
	return oldValue.F17, nil
}

// ClearF17 clears the value of the "f17" field.
func (m *EmStockBasicInfoMutation) ClearF17() {
	m.f17 = nil
	m.clearedFields[emstockbasicinfo.FieldF17] = struct{}{}
}

// F17Cleared returns if the "f17" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F17Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF17]
	return ok
}

// ResetF17 resets all changes to the "f17" field.
func (m *EmStockBasicInfoMutation) ResetF17() {
	m.f17 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF17)
}

// SetF18 sets the "f18" field.
func (m *EmStockBasicInfoMutation) SetF18(s string) {
	m.f18 = &s
}

// F18 returns the value of the "f18" field in the mutation.
func (m *EmStockBasicInfoMutation) F18() (r string, exists bool) {
	v := m.f18
	if v == nil {
		return
	}
	return *v, true
}

// OldF18 returns the old "f18" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF18(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF18 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF18 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF18: %w", err)
	}
	return oldValue.F18, nil
}

// ClearF18 clears the value of the "f18" field.
func (m *EmStockBasicInfoMutation) ClearF18() {
	m.f18 = nil
	m.clearedFields[emstockbasicinfo.FieldF18] = struct{}{}
}

// F18Cleared returns if the "f18" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F18Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF18]
	return ok
}

// ResetF18 resets all changes to the "f18" field.
func (m *EmStockBasicInfoMutation) ResetF18() {
	m.f18 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF18)
}

// SetF19 sets the "f19" field.
func (m *EmStockBasicInfoMutation) SetF19(s string) {
	m.f19 = &s
}

// F19 returns the value of the "f19" field in the mutation.
func (m *EmStockBasicInfoMutation) F19() (r string, exists bool) {
	v := m.f19
	if v == nil {
		return
	}
	return *v, true
}

// OldF19 returns the old "f19" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF19(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF19 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF19 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF19: %w", err)
	}
	return oldValue.F19, nil
}

// ClearF19 clears the value of the "f19" field.
func (m *EmStockBasicInfoMutation) ClearF19() {
	m.f19 = nil
	m.clearedFields[emstockbasicinfo.FieldF19] = struct{}{}
}

// F19Cleared returns if the "f19" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F19Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF19]
	return ok
}

// ResetF19 resets all changes to the "f19" field.
func (m *EmStockBasicInfoMutation) ResetF19() {
	m.f19 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF19)
}

// SetF20 sets the "f20" field.
func (m *EmStockBasicInfoMutation) SetF20(s string) {
	m.f20 = &s
}

// F20 returns the value of the "f20" field in the mutation.
func (m *EmStockBasicInfoMutation) F20() (r string, exists bool) {
	v := m.f20
	if v == nil {
		return
	}
	return *v, true
}

// OldF20 returns the old "f20" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF20(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF20 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF20 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF20: %w", err)
	}
	return oldValue.F20, nil
}

// ClearF20 clears the value of the "f20" field.
func (m *EmStockBasicInfoMutation) ClearF20() {
	m.f20 = nil
	m.clearedFields[emstockbasicinfo.FieldF20] = struct{}{}
}

// F20Cleared returns if the "f20" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F20Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF20]
	return ok
}

// ResetF20 resets all changes to the "f20" field.
func (m *EmStockBasicInfoMutation) ResetF20() {
	m.f20 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF20)
}

// SetF21 sets the "f21" field.
func (m *EmStockBasicInfoMutation) SetF21(s string) {
	m.f21 = &s
}

// F21 returns the value of the "f21" field in the mutation.
func (m *EmStockBasicInfoMutation) F21() (r string, exists bool) {
	v := m.f21
	if v == nil {
		return
	}
	return *v, true
}

// OldF21 returns the old "f21" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF21(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF21 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF21 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF21: %w", err)
	}
	return oldValue.F21, nil
}

// ClearF21 clears the value of the "f21" field.
func (m *EmStockBasicInfoMutation) ClearF21() {
	m.f21 = nil
	m.clearedFields[emstockbasicinfo.FieldF21] = struct{}{}
}

// F21Cleared returns if the "f21" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F21Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF21]
	return ok
}

// ResetF21 resets all changes to the "f21" field.
func (m *EmStockBasicInfoMutation) ResetF21() {
	m.f21 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF21)
}

// SetF22 sets the "f22" field.
func (m *EmStockBasicInfoMutation) SetF22(s string) {
	m.f22 = &s
}

// F22 returns the value of the "f22" field in the mutation.
func (m *EmStockBasicInfoMutation) F22() (r string, exists bool) {
	v := m.f22
	if v == nil {
		return
	}
	return *v, true
}

// OldF22 returns the old "f22" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF22(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF22 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF22 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF22: %w", err)
	}
	return oldValue.F22, nil
}

// ClearF22 clears the value of the "f22" field.
func (m *EmStockBasicInfoMutation) ClearF22() {
	m.f22 = nil
	m.clearedFields[emstockbasicinfo.FieldF22] = struct{}{}
}

// F22Cleared returns if the "f22" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F22Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF22]
	return ok
}

// ResetF22 resets all changes to the "f22" field.
func (m *EmStockBasicInfoMutation) ResetF22() {
	m.f22 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF22)
}

// SetF23 sets the "f23" field.
func (m *EmStockBasicInfoMutation) SetF23(s string) {
	m.f23 = &s
}

// F23 returns the value of the "f23" field in the mutation.
func (m *EmStockBasicInfoMutation) F23() (r string, exists bool) {
	v := m.f23
	if v == nil {
		return
	}
	return *v, true
}

// OldF23 returns the old "f23" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF23(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF23 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF23 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF23: %w", err)
	}
	return oldValue.F23, nil
}

// ClearF23 clears the value of the "f23" field.
func (m *EmStockBasicInfoMutation) ClearF23() {
	m.f23 = nil
	m.clearedFields[emstockbasicinfo.FieldF23] = struct{}{}
}

// F23Cleared returns if the "f23" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F23Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF23]
	return ok
}

// ResetF23 resets all changes to the "f23" field.
func (m *EmStockBasicInfoMutation) ResetF23() {
	m.f23 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF23)
}

// SetF24 sets the "f24" field.
func (m *EmStockBasicInfoMutation) SetF24(s string) {
	m.f24 = &s
}

// F24 returns the value of the "f24" field in the mutation.
func (m *EmStockBasicInfoMutation) F24() (r string, exists bool) {
	v := m.f24
	if v == nil {
		return
	}
	return *v, true
}

// OldF24 returns the old "f24" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF24(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF24 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF24 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF24: %w", err)
	}
	return oldValue.F24, nil
}

// ClearF24 clears the value of the "f24" field.
func (m *EmStockBasicInfoMutation) ClearF24() {
	m.f24 = nil
	m.clearedFields[emstockbasicinfo.FieldF24] = struct{}{}
}

// F24Cleared returns if the "f24" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F24Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF24]
	return ok
}

// ResetF24 resets all changes to the "f24" field.
func (m *EmStockBasicInfoMutation) ResetF24() {
	m.f24 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF24)
}

// SetF25 sets the "f25" field.
func (m *EmStockBasicInfoMutation) SetF25(s string) {
	m.f25 = &s
}

// F25 returns the value of the "f25" field in the mutation.
func (m *EmStockBasicInfoMutation) F25() (r string, exists bool) {
	v := m.f25
	if v == nil {
		return
	}
	return *v, true
}

// OldF25 returns the old "f25" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF25(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF25 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF25 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF25: %w", err)
	}
	return oldValue.F25, nil
}

// ClearF25 clears the value of the "f25" field.
func (m *EmStockBasicInfoMutation) ClearF25() {
	m.f25 = nil
	m.clearedFields[emstockbasicinfo.FieldF25] = struct{}{}
}

// F25Cleared returns if the "f25" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F25Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF25]
	return ok
}

// ResetF25 resets all changes to the "f25" field.
func (m *EmStockBasicInfoMutation) ResetF25() {
	m.f25 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF25)
}

// SetF26 sets the "f26" field.
func (m *EmStockBasicInfoMutation) SetF26(s string) {
	m.f26 = &s
}

// F26 returns the value of the "f26" field in the mutation.
func (m *EmStockBasicInfoMutation) F26() (r string, exists bool) {
	v := m.f26
	if v == nil {
		return
	}
	return *v, true
}

// OldF26 returns the old "f26" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF26(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF26 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF26 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF26: %w", err)
	}
	return oldValue.F26, nil
}

// ClearF26 clears the value of the "f26" field.
func (m *EmStockBasicInfoMutation) ClearF26() {
	m.f26 = nil
	m.clearedFields[emstockbasicinfo.FieldF26] = struct{}{}
}

// F26Cleared returns if the "f26" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F26Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF26]
	return ok
}

// ResetF26 resets all changes to the "f26" field.
func (m *EmStockBasicInfoMutation) ResetF26() {
	m.f26 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF26)
}

// SetF27 sets the "f27" field.
func (m *EmStockBasicInfoMutation) SetF27(s string) {
	m.f27 = &s
}

// F27 returns the value of the "f27" field in the mutation.
func (m *EmStockBasicInfoMutation) F27() (r string, exists bool) {
	v := m.f27
	if v == nil {
		return
	}
	return *v, true
}

// OldF27 returns the old "f27" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF27(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF27 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF27 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF27: %w", err)
	}
	return oldValue.F27, nil
}

// ClearF27 clears the value of the "f27" field.
func (m *EmStockBasicInfoMutation) ClearF27() {
	m.f27 = nil
	m.clearedFields[emstockbasicinfo.FieldF27] = struct{}{}
}

// F27Cleared returns if the "f27" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F27Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF27]
	return ok
}

// ResetF27 resets all changes to the "f27" field.
func (m *EmStockBasicInfoMutation) ResetF27() {
	m.f27 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF27)
}

// SetF28 sets the "f28" field.
func (m *EmStockBasicInfoMutation) SetF28(s string) {
	m.f28 = &s
}

// F28 returns the value of the "f28" field in the mutation.
func (m *EmStockBasicInfoMutation) F28() (r string, exists bool) {
	v := m.f28
	if v == nil {
		return
	}
	return *v, true
}

// OldF28 returns the old "f28" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF28(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF28 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF28 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF28: %w", err)
	}
	return oldValue.F28, nil
}

// ClearF28 clears the value of the "f28" field.
func (m *EmStockBasicInfoMutation) ClearF28() {
	m.f28 = nil
	m.clearedFields[emstockbasicinfo.FieldF28] = struct{}{}
}

// F28Cleared returns if the "f28" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F28Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF28]
	return ok
}

// ResetF28 resets all changes to the "f28" field.
func (m *EmStockBasicInfoMutation) ResetF28() {
	m.f28 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF28)
}

// SetF29 sets the "f29" field.
func (m *EmStockBasicInfoMutation) SetF29(s string) {
	m.f29 = &s
}

// F29 returns the value of the "f29" field in the mutation.
func (m *EmStockBasicInfoMutation) F29() (r string, exists bool) {
	v := m.f29
	if v == nil {
		return
	}
	return *v, true
}

// OldF29 returns the old "f29" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF29(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF29 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF29 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF29: %w", err)
	}
	return oldValue.F29, nil
}

// ClearF29 clears the value of the "f29" field.
func (m *EmStockBasicInfoMutation) ClearF29() {
	m.f29 = nil
	m.clearedFields[emstockbasicinfo.FieldF29] = struct{}{}
}

// F29Cleared returns if the "f29" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F29Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF29]
	return ok
}

// ResetF29 resets all changes to the "f29" field.
func (m *EmStockBasicInfoMutation) ResetF29() {
	m.f29 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF29)
}

// SetF30 sets the "f30" field.
func (m *EmStockBasicInfoMutation) SetF30(s string) {
	m.f30 = &s
}

// F30 returns the value of the "f30" field in the mutation.
func (m *EmStockBasicInfoMutation) F30() (r string, exists bool) {
	v := m.f30
	if v == nil {
		return
	}
	return *v, true
}

// OldF30 returns the old "f30" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldF30(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF30 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF30 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF30: %w", err)
	}
	return oldValue.F30, nil
}

// ClearF30 clears the value of the "f30" field.
func (m *EmStockBasicInfoMutation) ClearF30() {
	m.f30 = nil
	m.clearedFields[emstockbasicinfo.FieldF30] = struct{}{}
}

// F30Cleared returns if the "f30" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) F30Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldF30]
	return ok
}

// ResetF30 resets all changes to the "f30" field.
func (m *EmStockBasicInfoMutation) ResetF30() {
	m.f30 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldF30)
}

// SetCreateTime sets the "create_time" field.
func (m *EmStockBasicInfoMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *EmStockBasicInfoMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "create_time" field.
func (m *EmStockBasicInfoMutation) ClearCreateTime() {
	m.create_time = nil
	m.clearedFields[emstockbasicinfo.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "create_time" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *EmStockBasicInfoMutation) ResetCreateTime() {
	m.create_time = nil
	delete(m.clearedFields, emstockbasicinfo.FieldCreateTime)
}

// SetRemarks sets the "remarks" field.
func (m *EmStockBasicInfoMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the value of the "remarks" field in the mutation.
func (m *EmStockBasicInfoMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old "remarks" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemarks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ClearRemarks clears the value of the "remarks" field.
func (m *EmStockBasicInfoMutation) ClearRemarks() {
	m.remarks = nil
	m.clearedFields[emstockbasicinfo.FieldRemarks] = struct{}{}
}

// RemarksCleared returns if the "remarks" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) RemarksCleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldRemarks]
	return ok
}

// ResetRemarks resets all changes to the "remarks" field.
func (m *EmStockBasicInfoMutation) ResetRemarks() {
	m.remarks = nil
	delete(m.clearedFields, emstockbasicinfo.FieldRemarks)
}

// SetStatus sets the "status" field.
func (m *EmStockBasicInfoMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *EmStockBasicInfoMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *EmStockBasicInfoMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[emstockbasicinfo.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) StatusCleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *EmStockBasicInfoMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, emstockbasicinfo.FieldStatus)
}

// SetSt1 sets the "st1" field.
func (m *EmStockBasicInfoMutation) SetSt1(i int32) {
	m.st1 = &i
	m.addst1 = nil
}

// St1 returns the value of the "st1" field in the mutation.
func (m *EmStockBasicInfoMutation) St1() (r int32, exists bool) {
	v := m.st1
	if v == nil {
		return
	}
	return *v, true
}

// OldSt1 returns the old "st1" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldSt1(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSt1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSt1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSt1: %w", err)
	}
	return oldValue.St1, nil
}

// AddSt1 adds i to the "st1" field.
func (m *EmStockBasicInfoMutation) AddSt1(i int32) {
	if m.addst1 != nil {
		*m.addst1 += i
	} else {
		m.addst1 = &i
	}
}

// AddedSt1 returns the value that was added to the "st1" field in this mutation.
func (m *EmStockBasicInfoMutation) AddedSt1() (r int32, exists bool) {
	v := m.addst1
	if v == nil {
		return
	}
	return *v, true
}

// ClearSt1 clears the value of the "st1" field.
func (m *EmStockBasicInfoMutation) ClearSt1() {
	m.st1 = nil
	m.addst1 = nil
	m.clearedFields[emstockbasicinfo.FieldSt1] = struct{}{}
}

// St1Cleared returns if the "st1" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) St1Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldSt1]
	return ok
}

// ResetSt1 resets all changes to the "st1" field.
func (m *EmStockBasicInfoMutation) ResetSt1() {
	m.st1 = nil
	m.addst1 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldSt1)
}

// SetSt2 sets the "st2" field.
func (m *EmStockBasicInfoMutation) SetSt2(i int32) {
	m.st2 = &i
	m.addst2 = nil
}

// St2 returns the value of the "st2" field in the mutation.
func (m *EmStockBasicInfoMutation) St2() (r int32, exists bool) {
	v := m.st2
	if v == nil {
		return
	}
	return *v, true
}

// OldSt2 returns the old "st2" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldSt2(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSt2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSt2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSt2: %w", err)
	}
	return oldValue.St2, nil
}

// AddSt2 adds i to the "st2" field.
func (m *EmStockBasicInfoMutation) AddSt2(i int32) {
	if m.addst2 != nil {
		*m.addst2 += i
	} else {
		m.addst2 = &i
	}
}

// AddedSt2 returns the value that was added to the "st2" field in this mutation.
func (m *EmStockBasicInfoMutation) AddedSt2() (r int32, exists bool) {
	v := m.addst2
	if v == nil {
		return
	}
	return *v, true
}

// ClearSt2 clears the value of the "st2" field.
func (m *EmStockBasicInfoMutation) ClearSt2() {
	m.st2 = nil
	m.addst2 = nil
	m.clearedFields[emstockbasicinfo.FieldSt2] = struct{}{}
}

// St2Cleared returns if the "st2" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) St2Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldSt2]
	return ok
}

// ResetSt2 resets all changes to the "st2" field.
func (m *EmStockBasicInfoMutation) ResetSt2() {
	m.st2 = nil
	m.addst2 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldSt2)
}

// SetSt3 sets the "st3" field.
func (m *EmStockBasicInfoMutation) SetSt3(i int32) {
	m.st3 = &i
	m.addst3 = nil
}

// St3 returns the value of the "st3" field in the mutation.
func (m *EmStockBasicInfoMutation) St3() (r int32, exists bool) {
	v := m.st3
	if v == nil {
		return
	}
	return *v, true
}

// OldSt3 returns the old "st3" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldSt3(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSt3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSt3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSt3: %w", err)
	}
	return oldValue.St3, nil
}

// AddSt3 adds i to the "st3" field.
func (m *EmStockBasicInfoMutation) AddSt3(i int32) {
	if m.addst3 != nil {
		*m.addst3 += i
	} else {
		m.addst3 = &i
	}
}

// AddedSt3 returns the value that was added to the "st3" field in this mutation.
func (m *EmStockBasicInfoMutation) AddedSt3() (r int32, exists bool) {
	v := m.addst3
	if v == nil {
		return
	}
	return *v, true
}

// ClearSt3 clears the value of the "st3" field.
func (m *EmStockBasicInfoMutation) ClearSt3() {
	m.st3 = nil
	m.addst3 = nil
	m.clearedFields[emstockbasicinfo.FieldSt3] = struct{}{}
}

// St3Cleared returns if the "st3" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) St3Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldSt3]
	return ok
}

// ResetSt3 resets all changes to the "st3" field.
func (m *EmStockBasicInfoMutation) ResetSt3() {
	m.st3 = nil
	m.addst3 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldSt3)
}

// SetSt4 sets the "st4" field.
func (m *EmStockBasicInfoMutation) SetSt4(i int32) {
	m.st4 = &i
	m.addst4 = nil
}

// St4 returns the value of the "st4" field in the mutation.
func (m *EmStockBasicInfoMutation) St4() (r int32, exists bool) {
	v := m.st4
	if v == nil {
		return
	}
	return *v, true
}

// OldSt4 returns the old "st4" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldSt4(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSt4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSt4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSt4: %w", err)
	}
	return oldValue.St4, nil
}

// AddSt4 adds i to the "st4" field.
func (m *EmStockBasicInfoMutation) AddSt4(i int32) {
	if m.addst4 != nil {
		*m.addst4 += i
	} else {
		m.addst4 = &i
	}
}

// AddedSt4 returns the value that was added to the "st4" field in this mutation.
func (m *EmStockBasicInfoMutation) AddedSt4() (r int32, exists bool) {
	v := m.addst4
	if v == nil {
		return
	}
	return *v, true
}

// ClearSt4 clears the value of the "st4" field.
func (m *EmStockBasicInfoMutation) ClearSt4() {
	m.st4 = nil
	m.addst4 = nil
	m.clearedFields[emstockbasicinfo.FieldSt4] = struct{}{}
}

// St4Cleared returns if the "st4" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) St4Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldSt4]
	return ok
}

// ResetSt4 resets all changes to the "st4" field.
func (m *EmStockBasicInfoMutation) ResetSt4() {
	m.st4 = nil
	m.addst4 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldSt4)
}

// SetSt5 sets the "st5" field.
func (m *EmStockBasicInfoMutation) SetSt5(i int32) {
	m.st5 = &i
	m.addst5 = nil
}

// St5 returns the value of the "st5" field in the mutation.
func (m *EmStockBasicInfoMutation) St5() (r int32, exists bool) {
	v := m.st5
	if v == nil {
		return
	}
	return *v, true
}

// OldSt5 returns the old "st5" field's value of the EmStockBasicInfo entity.
// If the EmStockBasicInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockBasicInfoMutation) OldSt5(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSt5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSt5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSt5: %w", err)
	}
	return oldValue.St5, nil
}

// AddSt5 adds i to the "st5" field.
func (m *EmStockBasicInfoMutation) AddSt5(i int32) {
	if m.addst5 != nil {
		*m.addst5 += i
	} else {
		m.addst5 = &i
	}
}

// AddedSt5 returns the value that was added to the "st5" field in this mutation.
func (m *EmStockBasicInfoMutation) AddedSt5() (r int32, exists bool) {
	v := m.addst5
	if v == nil {
		return
	}
	return *v, true
}

// ClearSt5 clears the value of the "st5" field.
func (m *EmStockBasicInfoMutation) ClearSt5() {
	m.st5 = nil
	m.addst5 = nil
	m.clearedFields[emstockbasicinfo.FieldSt5] = struct{}{}
}

// St5Cleared returns if the "st5" field was cleared in this mutation.
func (m *EmStockBasicInfoMutation) St5Cleared() bool {
	_, ok := m.clearedFields[emstockbasicinfo.FieldSt5]
	return ok
}

// ResetSt5 resets all changes to the "st5" field.
func (m *EmStockBasicInfoMutation) ResetSt5() {
	m.st5 = nil
	m.addst5 = nil
	delete(m.clearedFields, emstockbasicinfo.FieldSt5)
}

// Where appends a list predicates to the EmStockBasicInfoMutation builder.
func (m *EmStockBasicInfoMutation) Where(ps ...predicate.EmStockBasicInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmStockBasicInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmStockBasicInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EmStockBasicInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmStockBasicInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmStockBasicInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EmStockBasicInfo).
func (m *EmStockBasicInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmStockBasicInfoMutation) Fields() []string {
	fields := make([]string, 0, 38)
	if m.f1 != nil {
		fields = append(fields, emstockbasicinfo.FieldF1)
	}
	if m.f2 != nil {
		fields = append(fields, emstockbasicinfo.FieldF2)
	}
	if m.f3 != nil {
		fields = append(fields, emstockbasicinfo.FieldF3)
	}
	if m.f4 != nil {
		fields = append(fields, emstockbasicinfo.FieldF4)
	}
	if m.f5 != nil {
		fields = append(fields, emstockbasicinfo.FieldF5)
	}
	if m.f6 != nil {
		fields = append(fields, emstockbasicinfo.FieldF6)
	}
	if m.f7 != nil {
		fields = append(fields, emstockbasicinfo.FieldF7)
	}
	if m.f8 != nil {
		fields = append(fields, emstockbasicinfo.FieldF8)
	}
	if m.f9 != nil {
		fields = append(fields, emstockbasicinfo.FieldF9)
	}
	if m.f10 != nil {
		fields = append(fields, emstockbasicinfo.FieldF10)
	}
	if m.f11 != nil {
		fields = append(fields, emstockbasicinfo.FieldF11)
	}
	if m.f12 != nil {
		fields = append(fields, emstockbasicinfo.FieldF12)
	}
	if m.f13 != nil {
		fields = append(fields, emstockbasicinfo.FieldF13)
	}
	if m.f14 != nil {
		fields = append(fields, emstockbasicinfo.FieldF14)
	}
	if m.f15 != nil {
		fields = append(fields, emstockbasicinfo.FieldF15)
	}
	if m.f16 != nil {
		fields = append(fields, emstockbasicinfo.FieldF16)
	}
	if m.f17 != nil {
		fields = append(fields, emstockbasicinfo.FieldF17)
	}
	if m.f18 != nil {
		fields = append(fields, emstockbasicinfo.FieldF18)
	}
	if m.f19 != nil {
		fields = append(fields, emstockbasicinfo.FieldF19)
	}
	if m.f20 != nil {
		fields = append(fields, emstockbasicinfo.FieldF20)
	}
	if m.f21 != nil {
		fields = append(fields, emstockbasicinfo.FieldF21)
	}
	if m.f22 != nil {
		fields = append(fields, emstockbasicinfo.FieldF22)
	}
	if m.f23 != nil {
		fields = append(fields, emstockbasicinfo.FieldF23)
	}
	if m.f24 != nil {
		fields = append(fields, emstockbasicinfo.FieldF24)
	}
	if m.f25 != nil {
		fields = append(fields, emstockbasicinfo.FieldF25)
	}
	if m.f26 != nil {
		fields = append(fields, emstockbasicinfo.FieldF26)
	}
	if m.f27 != nil {
		fields = append(fields, emstockbasicinfo.FieldF27)
	}
	if m.f28 != nil {
		fields = append(fields, emstockbasicinfo.FieldF28)
	}
	if m.f29 != nil {
		fields = append(fields, emstockbasicinfo.FieldF29)
	}
	if m.f30 != nil {
		fields = append(fields, emstockbasicinfo.FieldF30)
	}
	if m.create_time != nil {
		fields = append(fields, emstockbasicinfo.FieldCreateTime)
	}
	if m.remarks != nil {
		fields = append(fields, emstockbasicinfo.FieldRemarks)
	}
	if m.status != nil {
		fields = append(fields, emstockbasicinfo.FieldStatus)
	}
	if m.st1 != nil {
		fields = append(fields, emstockbasicinfo.FieldSt1)
	}
	if m.st2 != nil {
		fields = append(fields, emstockbasicinfo.FieldSt2)
	}
	if m.st3 != nil {
		fields = append(fields, emstockbasicinfo.FieldSt3)
	}
	if m.st4 != nil {
		fields = append(fields, emstockbasicinfo.FieldSt4)
	}
	if m.st5 != nil {
		fields = append(fields, emstockbasicinfo.FieldSt5)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmStockBasicInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emstockbasicinfo.FieldF1:
		return m.F1()
	case emstockbasicinfo.FieldF2:
		return m.F2()
	case emstockbasicinfo.FieldF3:
		return m.F3()
	case emstockbasicinfo.FieldF4:
		return m.F4()
	case emstockbasicinfo.FieldF5:
		return m.F5()
	case emstockbasicinfo.FieldF6:
		return m.F6()
	case emstockbasicinfo.FieldF7:
		return m.F7()
	case emstockbasicinfo.FieldF8:
		return m.F8()
	case emstockbasicinfo.FieldF9:
		return m.F9()
	case emstockbasicinfo.FieldF10:
		return m.F10()
	case emstockbasicinfo.FieldF11:
		return m.F11()
	case emstockbasicinfo.FieldF12:
		return m.F12()
	case emstockbasicinfo.FieldF13:
		return m.F13()
	case emstockbasicinfo.FieldF14:
		return m.F14()
	case emstockbasicinfo.FieldF15:
		return m.F15()
	case emstockbasicinfo.FieldF16:
		return m.F16()
	case emstockbasicinfo.FieldF17:
		return m.F17()
	case emstockbasicinfo.FieldF18:
		return m.F18()
	case emstockbasicinfo.FieldF19:
		return m.F19()
	case emstockbasicinfo.FieldF20:
		return m.F20()
	case emstockbasicinfo.FieldF21:
		return m.F21()
	case emstockbasicinfo.FieldF22:
		return m.F22()
	case emstockbasicinfo.FieldF23:
		return m.F23()
	case emstockbasicinfo.FieldF24:
		return m.F24()
	case emstockbasicinfo.FieldF25:
		return m.F25()
	case emstockbasicinfo.FieldF26:
		return m.F26()
	case emstockbasicinfo.FieldF27:
		return m.F27()
	case emstockbasicinfo.FieldF28:
		return m.F28()
	case emstockbasicinfo.FieldF29:
		return m.F29()
	case emstockbasicinfo.FieldF30:
		return m.F30()
	case emstockbasicinfo.FieldCreateTime:
		return m.CreateTime()
	case emstockbasicinfo.FieldRemarks:
		return m.Remarks()
	case emstockbasicinfo.FieldStatus:
		return m.Status()
	case emstockbasicinfo.FieldSt1:
		return m.St1()
	case emstockbasicinfo.FieldSt2:
		return m.St2()
	case emstockbasicinfo.FieldSt3:
		return m.St3()
	case emstockbasicinfo.FieldSt4:
		return m.St4()
	case emstockbasicinfo.FieldSt5:
		return m.St5()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmStockBasicInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emstockbasicinfo.FieldF1:
		return m.OldF1(ctx)
	case emstockbasicinfo.FieldF2:
		return m.OldF2(ctx)
	case emstockbasicinfo.FieldF3:
		return m.OldF3(ctx)
	case emstockbasicinfo.FieldF4:
		return m.OldF4(ctx)
	case emstockbasicinfo.FieldF5:
		return m.OldF5(ctx)
	case emstockbasicinfo.FieldF6:
		return m.OldF6(ctx)
	case emstockbasicinfo.FieldF7:
		return m.OldF7(ctx)
	case emstockbasicinfo.FieldF8:
		return m.OldF8(ctx)
	case emstockbasicinfo.FieldF9:
		return m.OldF9(ctx)
	case emstockbasicinfo.FieldF10:
		return m.OldF10(ctx)
	case emstockbasicinfo.FieldF11:
		return m.OldF11(ctx)
	case emstockbasicinfo.FieldF12:
		return m.OldF12(ctx)
	case emstockbasicinfo.FieldF13:
		return m.OldF13(ctx)
	case emstockbasicinfo.FieldF14:
		return m.OldF14(ctx)
	case emstockbasicinfo.FieldF15:
		return m.OldF15(ctx)
	case emstockbasicinfo.FieldF16:
		return m.OldF16(ctx)
	case emstockbasicinfo.FieldF17:
		return m.OldF17(ctx)
	case emstockbasicinfo.FieldF18:
		return m.OldF18(ctx)
	case emstockbasicinfo.FieldF19:
		return m.OldF19(ctx)
	case emstockbasicinfo.FieldF20:
		return m.OldF20(ctx)
	case emstockbasicinfo.FieldF21:
		return m.OldF21(ctx)
	case emstockbasicinfo.FieldF22:
		return m.OldF22(ctx)
	case emstockbasicinfo.FieldF23:
		return m.OldF23(ctx)
	case emstockbasicinfo.FieldF24:
		return m.OldF24(ctx)
	case emstockbasicinfo.FieldF25:
		return m.OldF25(ctx)
	case emstockbasicinfo.FieldF26:
		return m.OldF26(ctx)
	case emstockbasicinfo.FieldF27:
		return m.OldF27(ctx)
	case emstockbasicinfo.FieldF28:
		return m.OldF28(ctx)
	case emstockbasicinfo.FieldF29:
		return m.OldF29(ctx)
	case emstockbasicinfo.FieldF30:
		return m.OldF30(ctx)
	case emstockbasicinfo.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case emstockbasicinfo.FieldRemarks:
		return m.OldRemarks(ctx)
	case emstockbasicinfo.FieldStatus:
		return m.OldStatus(ctx)
	case emstockbasicinfo.FieldSt1:
		return m.OldSt1(ctx)
	case emstockbasicinfo.FieldSt2:
		return m.OldSt2(ctx)
	case emstockbasicinfo.FieldSt3:
		return m.OldSt3(ctx)
	case emstockbasicinfo.FieldSt4:
		return m.OldSt4(ctx)
	case emstockbasicinfo.FieldSt5:
		return m.OldSt5(ctx)
	}
	return nil, fmt.Errorf("unknown EmStockBasicInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmStockBasicInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emstockbasicinfo.FieldF1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF1(v)
		return nil
	case emstockbasicinfo.FieldF2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF2(v)
		return nil
	case emstockbasicinfo.FieldF3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF3(v)
		return nil
	case emstockbasicinfo.FieldF4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF4(v)
		return nil
	case emstockbasicinfo.FieldF5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF5(v)
		return nil
	case emstockbasicinfo.FieldF6:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF6(v)
		return nil
	case emstockbasicinfo.FieldF7:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF7(v)
		return nil
	case emstockbasicinfo.FieldF8:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF8(v)
		return nil
	case emstockbasicinfo.FieldF9:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF9(v)
		return nil
	case emstockbasicinfo.FieldF10:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF10(v)
		return nil
	case emstockbasicinfo.FieldF11:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF11(v)
		return nil
	case emstockbasicinfo.FieldF12:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF12(v)
		return nil
	case emstockbasicinfo.FieldF13:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF13(v)
		return nil
	case emstockbasicinfo.FieldF14:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF14(v)
		return nil
	case emstockbasicinfo.FieldF15:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF15(v)
		return nil
	case emstockbasicinfo.FieldF16:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF16(v)
		return nil
	case emstockbasicinfo.FieldF17:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF17(v)
		return nil
	case emstockbasicinfo.FieldF18:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF18(v)
		return nil
	case emstockbasicinfo.FieldF19:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF19(v)
		return nil
	case emstockbasicinfo.FieldF20:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF20(v)
		return nil
	case emstockbasicinfo.FieldF21:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF21(v)
		return nil
	case emstockbasicinfo.FieldF22:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF22(v)
		return nil
	case emstockbasicinfo.FieldF23:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF23(v)
		return nil
	case emstockbasicinfo.FieldF24:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF24(v)
		return nil
	case emstockbasicinfo.FieldF25:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF25(v)
		return nil
	case emstockbasicinfo.FieldF26:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF26(v)
		return nil
	case emstockbasicinfo.FieldF27:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF27(v)
		return nil
	case emstockbasicinfo.FieldF28:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF28(v)
		return nil
	case emstockbasicinfo.FieldF29:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF29(v)
		return nil
	case emstockbasicinfo.FieldF30:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF30(v)
		return nil
	case emstockbasicinfo.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case emstockbasicinfo.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case emstockbasicinfo.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case emstockbasicinfo.FieldSt1:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSt1(v)
		return nil
	case emstockbasicinfo.FieldSt2:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSt2(v)
		return nil
	case emstockbasicinfo.FieldSt3:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSt3(v)
		return nil
	case emstockbasicinfo.FieldSt4:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSt4(v)
		return nil
	case emstockbasicinfo.FieldSt5:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSt5(v)
		return nil
	}
	return fmt.Errorf("unknown EmStockBasicInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmStockBasicInfoMutation) AddedFields() []string {
	var fields []string
	if m.addst1 != nil {
		fields = append(fields, emstockbasicinfo.FieldSt1)
	}
	if m.addst2 != nil {
		fields = append(fields, emstockbasicinfo.FieldSt2)
	}
	if m.addst3 != nil {
		fields = append(fields, emstockbasicinfo.FieldSt3)
	}
	if m.addst4 != nil {
		fields = append(fields, emstockbasicinfo.FieldSt4)
	}
	if m.addst5 != nil {
		fields = append(fields, emstockbasicinfo.FieldSt5)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmStockBasicInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case emstockbasicinfo.FieldSt1:
		return m.AddedSt1()
	case emstockbasicinfo.FieldSt2:
		return m.AddedSt2()
	case emstockbasicinfo.FieldSt3:
		return m.AddedSt3()
	case emstockbasicinfo.FieldSt4:
		return m.AddedSt4()
	case emstockbasicinfo.FieldSt5:
		return m.AddedSt5()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmStockBasicInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case emstockbasicinfo.FieldSt1:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSt1(v)
		return nil
	case emstockbasicinfo.FieldSt2:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSt2(v)
		return nil
	case emstockbasicinfo.FieldSt3:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSt3(v)
		return nil
	case emstockbasicinfo.FieldSt4:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSt4(v)
		return nil
	case emstockbasicinfo.FieldSt5:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSt5(v)
		return nil
	}
	return fmt.Errorf("unknown EmStockBasicInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmStockBasicInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(emstockbasicinfo.FieldF1) {
		fields = append(fields, emstockbasicinfo.FieldF1)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF2) {
		fields = append(fields, emstockbasicinfo.FieldF2)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF3) {
		fields = append(fields, emstockbasicinfo.FieldF3)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF4) {
		fields = append(fields, emstockbasicinfo.FieldF4)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF5) {
		fields = append(fields, emstockbasicinfo.FieldF5)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF6) {
		fields = append(fields, emstockbasicinfo.FieldF6)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF7) {
		fields = append(fields, emstockbasicinfo.FieldF7)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF8) {
		fields = append(fields, emstockbasicinfo.FieldF8)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF9) {
		fields = append(fields, emstockbasicinfo.FieldF9)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF10) {
		fields = append(fields, emstockbasicinfo.FieldF10)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF11) {
		fields = append(fields, emstockbasicinfo.FieldF11)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF12) {
		fields = append(fields, emstockbasicinfo.FieldF12)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF13) {
		fields = append(fields, emstockbasicinfo.FieldF13)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF14) {
		fields = append(fields, emstockbasicinfo.FieldF14)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF15) {
		fields = append(fields, emstockbasicinfo.FieldF15)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF16) {
		fields = append(fields, emstockbasicinfo.FieldF16)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF17) {
		fields = append(fields, emstockbasicinfo.FieldF17)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF18) {
		fields = append(fields, emstockbasicinfo.FieldF18)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF19) {
		fields = append(fields, emstockbasicinfo.FieldF19)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF20) {
		fields = append(fields, emstockbasicinfo.FieldF20)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF21) {
		fields = append(fields, emstockbasicinfo.FieldF21)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF22) {
		fields = append(fields, emstockbasicinfo.FieldF22)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF23) {
		fields = append(fields, emstockbasicinfo.FieldF23)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF24) {
		fields = append(fields, emstockbasicinfo.FieldF24)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF25) {
		fields = append(fields, emstockbasicinfo.FieldF25)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF26) {
		fields = append(fields, emstockbasicinfo.FieldF26)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF27) {
		fields = append(fields, emstockbasicinfo.FieldF27)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF28) {
		fields = append(fields, emstockbasicinfo.FieldF28)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF29) {
		fields = append(fields, emstockbasicinfo.FieldF29)
	}
	if m.FieldCleared(emstockbasicinfo.FieldF30) {
		fields = append(fields, emstockbasicinfo.FieldF30)
	}
	if m.FieldCleared(emstockbasicinfo.FieldCreateTime) {
		fields = append(fields, emstockbasicinfo.FieldCreateTime)
	}
	if m.FieldCleared(emstockbasicinfo.FieldRemarks) {
		fields = append(fields, emstockbasicinfo.FieldRemarks)
	}
	if m.FieldCleared(emstockbasicinfo.FieldStatus) {
		fields = append(fields, emstockbasicinfo.FieldStatus)
	}
	if m.FieldCleared(emstockbasicinfo.FieldSt1) {
		fields = append(fields, emstockbasicinfo.FieldSt1)
	}
	if m.FieldCleared(emstockbasicinfo.FieldSt2) {
		fields = append(fields, emstockbasicinfo.FieldSt2)
	}
	if m.FieldCleared(emstockbasicinfo.FieldSt3) {
		fields = append(fields, emstockbasicinfo.FieldSt3)
	}
	if m.FieldCleared(emstockbasicinfo.FieldSt4) {
		fields = append(fields, emstockbasicinfo.FieldSt4)
	}
	if m.FieldCleared(emstockbasicinfo.FieldSt5) {
		fields = append(fields, emstockbasicinfo.FieldSt5)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmStockBasicInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmStockBasicInfoMutation) ClearField(name string) error {
	switch name {
	case emstockbasicinfo.FieldF1:
		m.ClearF1()
		return nil
	case emstockbasicinfo.FieldF2:
		m.ClearF2()
		return nil
	case emstockbasicinfo.FieldF3:
		m.ClearF3()
		return nil
	case emstockbasicinfo.FieldF4:
		m.ClearF4()
		return nil
	case emstockbasicinfo.FieldF5:
		m.ClearF5()
		return nil
	case emstockbasicinfo.FieldF6:
		m.ClearF6()
		return nil
	case emstockbasicinfo.FieldF7:
		m.ClearF7()
		return nil
	case emstockbasicinfo.FieldF8:
		m.ClearF8()
		return nil
	case emstockbasicinfo.FieldF9:
		m.ClearF9()
		return nil
	case emstockbasicinfo.FieldF10:
		m.ClearF10()
		return nil
	case emstockbasicinfo.FieldF11:
		m.ClearF11()
		return nil
	case emstockbasicinfo.FieldF12:
		m.ClearF12()
		return nil
	case emstockbasicinfo.FieldF13:
		m.ClearF13()
		return nil
	case emstockbasicinfo.FieldF14:
		m.ClearF14()
		return nil
	case emstockbasicinfo.FieldF15:
		m.ClearF15()
		return nil
	case emstockbasicinfo.FieldF16:
		m.ClearF16()
		return nil
	case emstockbasicinfo.FieldF17:
		m.ClearF17()
		return nil
	case emstockbasicinfo.FieldF18:
		m.ClearF18()
		return nil
	case emstockbasicinfo.FieldF19:
		m.ClearF19()
		return nil
	case emstockbasicinfo.FieldF20:
		m.ClearF20()
		return nil
	case emstockbasicinfo.FieldF21:
		m.ClearF21()
		return nil
	case emstockbasicinfo.FieldF22:
		m.ClearF22()
		return nil
	case emstockbasicinfo.FieldF23:
		m.ClearF23()
		return nil
	case emstockbasicinfo.FieldF24:
		m.ClearF24()
		return nil
	case emstockbasicinfo.FieldF25:
		m.ClearF25()
		return nil
	case emstockbasicinfo.FieldF26:
		m.ClearF26()
		return nil
	case emstockbasicinfo.FieldF27:
		m.ClearF27()
		return nil
	case emstockbasicinfo.FieldF28:
		m.ClearF28()
		return nil
	case emstockbasicinfo.FieldF29:
		m.ClearF29()
		return nil
	case emstockbasicinfo.FieldF30:
		m.ClearF30()
		return nil
	case emstockbasicinfo.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case emstockbasicinfo.FieldRemarks:
		m.ClearRemarks()
		return nil
	case emstockbasicinfo.FieldStatus:
		m.ClearStatus()
		return nil
	case emstockbasicinfo.FieldSt1:
		m.ClearSt1()
		return nil
	case emstockbasicinfo.FieldSt2:
		m.ClearSt2()
		return nil
	case emstockbasicinfo.FieldSt3:
		m.ClearSt3()
		return nil
	case emstockbasicinfo.FieldSt4:
		m.ClearSt4()
		return nil
	case emstockbasicinfo.FieldSt5:
		m.ClearSt5()
		return nil
	}
	return fmt.Errorf("unknown EmStockBasicInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmStockBasicInfoMutation) ResetField(name string) error {
	switch name {
	case emstockbasicinfo.FieldF1:
		m.ResetF1()
		return nil
	case emstockbasicinfo.FieldF2:
		m.ResetF2()
		return nil
	case emstockbasicinfo.FieldF3:
		m.ResetF3()
		return nil
	case emstockbasicinfo.FieldF4:
		m.ResetF4()
		return nil
	case emstockbasicinfo.FieldF5:
		m.ResetF5()
		return nil
	case emstockbasicinfo.FieldF6:
		m.ResetF6()
		return nil
	case emstockbasicinfo.FieldF7:
		m.ResetF7()
		return nil
	case emstockbasicinfo.FieldF8:
		m.ResetF8()
		return nil
	case emstockbasicinfo.FieldF9:
		m.ResetF9()
		return nil
	case emstockbasicinfo.FieldF10:
		m.ResetF10()
		return nil
	case emstockbasicinfo.FieldF11:
		m.ResetF11()
		return nil
	case emstockbasicinfo.FieldF12:
		m.ResetF12()
		return nil
	case emstockbasicinfo.FieldF13:
		m.ResetF13()
		return nil
	case emstockbasicinfo.FieldF14:
		m.ResetF14()
		return nil
	case emstockbasicinfo.FieldF15:
		m.ResetF15()
		return nil
	case emstockbasicinfo.FieldF16:
		m.ResetF16()
		return nil
	case emstockbasicinfo.FieldF17:
		m.ResetF17()
		return nil
	case emstockbasicinfo.FieldF18:
		m.ResetF18()
		return nil
	case emstockbasicinfo.FieldF19:
		m.ResetF19()
		return nil
	case emstockbasicinfo.FieldF20:
		m.ResetF20()
		return nil
	case emstockbasicinfo.FieldF21:
		m.ResetF21()
		return nil
	case emstockbasicinfo.FieldF22:
		m.ResetF22()
		return nil
	case emstockbasicinfo.FieldF23:
		m.ResetF23()
		return nil
	case emstockbasicinfo.FieldF24:
		m.ResetF24()
		return nil
	case emstockbasicinfo.FieldF25:
		m.ResetF25()
		return nil
	case emstockbasicinfo.FieldF26:
		m.ResetF26()
		return nil
	case emstockbasicinfo.FieldF27:
		m.ResetF27()
		return nil
	case emstockbasicinfo.FieldF28:
		m.ResetF28()
		return nil
	case emstockbasicinfo.FieldF29:
		m.ResetF29()
		return nil
	case emstockbasicinfo.FieldF30:
		m.ResetF30()
		return nil
	case emstockbasicinfo.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case emstockbasicinfo.FieldRemarks:
		m.ResetRemarks()
		return nil
	case emstockbasicinfo.FieldStatus:
		m.ResetStatus()
		return nil
	case emstockbasicinfo.FieldSt1:
		m.ResetSt1()
		return nil
	case emstockbasicinfo.FieldSt2:
		m.ResetSt2()
		return nil
	case emstockbasicinfo.FieldSt3:
		m.ResetSt3()
		return nil
	case emstockbasicinfo.FieldSt4:
		m.ResetSt4()
		return nil
	case emstockbasicinfo.FieldSt5:
		m.ResetSt5()
		return nil
	}
	return fmt.Errorf("unknown EmStockBasicInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmStockBasicInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmStockBasicInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmStockBasicInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmStockBasicInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmStockBasicInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmStockBasicInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmStockBasicInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EmStockBasicInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmStockBasicInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EmStockBasicInfo edge %s", name)
}

// EmStockWatchMutation represents an operation that mutates the EmStockWatch nodes in the graph.
type EmStockWatchMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int32
	stock_watch_code        *string
	stock_watch_name        *string
	stock_watch_up_price    *string
	stock_watch_fall_price  *string
	stock_watch_up_change   *string
	stock_watch_fall_change *string
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*EmStockWatch, error)
	predicates              []predicate.EmStockWatch
}

var _ ent.Mutation = (*EmStockWatchMutation)(nil)

// emstockwatchOption allows management of the mutation configuration using functional options.
type emstockwatchOption func(*EmStockWatchMutation)

// newEmStockWatchMutation creates new mutation for the EmStockWatch entity.
func newEmStockWatchMutation(c config, op Op, opts ...emstockwatchOption) *EmStockWatchMutation {
	m := &EmStockWatchMutation{
		config:        c,
		op:            op,
		typ:           TypeEmStockWatch,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmStockWatchID sets the ID field of the mutation.
func withEmStockWatchID(id int32) emstockwatchOption {
	return func(m *EmStockWatchMutation) {
		var (
			err   error
			once  sync.Once
			value *EmStockWatch
		)
		m.oldValue = func(ctx context.Context) (*EmStockWatch, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmStockWatch.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmStockWatch sets the old EmStockWatch of the mutation.
func withEmStockWatch(node *EmStockWatch) emstockwatchOption {
	return func(m *EmStockWatchMutation) {
		m.oldValue = func(context.Context) (*EmStockWatch, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmStockWatchMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmStockWatchMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EmStockWatch entities.
func (m *EmStockWatchMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmStockWatchMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmStockWatchMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EmStockWatch.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStockWatchCode sets the "stock_watch_code" field.
func (m *EmStockWatchMutation) SetStockWatchCode(s string) {
	m.stock_watch_code = &s
}

// StockWatchCode returns the value of the "stock_watch_code" field in the mutation.
func (m *EmStockWatchMutation) StockWatchCode() (r string, exists bool) {
	v := m.stock_watch_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStockWatchCode returns the old "stock_watch_code" field's value of the EmStockWatch entity.
// If the EmStockWatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockWatchMutation) OldStockWatchCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStockWatchCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStockWatchCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStockWatchCode: %w", err)
	}
	return oldValue.StockWatchCode, nil
}

// ClearStockWatchCode clears the value of the "stock_watch_code" field.
func (m *EmStockWatchMutation) ClearStockWatchCode() {
	m.stock_watch_code = nil
	m.clearedFields[emstockwatch.FieldStockWatchCode] = struct{}{}
}

// StockWatchCodeCleared returns if the "stock_watch_code" field was cleared in this mutation.
func (m *EmStockWatchMutation) StockWatchCodeCleared() bool {
	_, ok := m.clearedFields[emstockwatch.FieldStockWatchCode]
	return ok
}

// ResetStockWatchCode resets all changes to the "stock_watch_code" field.
func (m *EmStockWatchMutation) ResetStockWatchCode() {
	m.stock_watch_code = nil
	delete(m.clearedFields, emstockwatch.FieldStockWatchCode)
}

// SetStockWatchName sets the "stock_watch_name" field.
func (m *EmStockWatchMutation) SetStockWatchName(s string) {
	m.stock_watch_name = &s
}

// StockWatchName returns the value of the "stock_watch_name" field in the mutation.
func (m *EmStockWatchMutation) StockWatchName() (r string, exists bool) {
	v := m.stock_watch_name
	if v == nil {
		return
	}
	return *v, true
}

// OldStockWatchName returns the old "stock_watch_name" field's value of the EmStockWatch entity.
// If the EmStockWatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockWatchMutation) OldStockWatchName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStockWatchName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStockWatchName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStockWatchName: %w", err)
	}
	return oldValue.StockWatchName, nil
}

// ClearStockWatchName clears the value of the "stock_watch_name" field.
func (m *EmStockWatchMutation) ClearStockWatchName() {
	m.stock_watch_name = nil
	m.clearedFields[emstockwatch.FieldStockWatchName] = struct{}{}
}

// StockWatchNameCleared returns if the "stock_watch_name" field was cleared in this mutation.
func (m *EmStockWatchMutation) StockWatchNameCleared() bool {
	_, ok := m.clearedFields[emstockwatch.FieldStockWatchName]
	return ok
}

// ResetStockWatchName resets all changes to the "stock_watch_name" field.
func (m *EmStockWatchMutation) ResetStockWatchName() {
	m.stock_watch_name = nil
	delete(m.clearedFields, emstockwatch.FieldStockWatchName)
}

// SetStockWatchUpPrice sets the "stock_watch_up_price" field.
func (m *EmStockWatchMutation) SetStockWatchUpPrice(s string) {
	m.stock_watch_up_price = &s
}

// StockWatchUpPrice returns the value of the "stock_watch_up_price" field in the mutation.
func (m *EmStockWatchMutation) StockWatchUpPrice() (r string, exists bool) {
	v := m.stock_watch_up_price
	if v == nil {
		return
	}
	return *v, true
}

// OldStockWatchUpPrice returns the old "stock_watch_up_price" field's value of the EmStockWatch entity.
// If the EmStockWatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockWatchMutation) OldStockWatchUpPrice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStockWatchUpPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStockWatchUpPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStockWatchUpPrice: %w", err)
	}
	return oldValue.StockWatchUpPrice, nil
}

// ClearStockWatchUpPrice clears the value of the "stock_watch_up_price" field.
func (m *EmStockWatchMutation) ClearStockWatchUpPrice() {
	m.stock_watch_up_price = nil
	m.clearedFields[emstockwatch.FieldStockWatchUpPrice] = struct{}{}
}

// StockWatchUpPriceCleared returns if the "stock_watch_up_price" field was cleared in this mutation.
func (m *EmStockWatchMutation) StockWatchUpPriceCleared() bool {
	_, ok := m.clearedFields[emstockwatch.FieldStockWatchUpPrice]
	return ok
}

// ResetStockWatchUpPrice resets all changes to the "stock_watch_up_price" field.
func (m *EmStockWatchMutation) ResetStockWatchUpPrice() {
	m.stock_watch_up_price = nil
	delete(m.clearedFields, emstockwatch.FieldStockWatchUpPrice)
}

// SetStockWatchFallPrice sets the "stock_watch_fall_price" field.
func (m *EmStockWatchMutation) SetStockWatchFallPrice(s string) {
	m.stock_watch_fall_price = &s
}

// StockWatchFallPrice returns the value of the "stock_watch_fall_price" field in the mutation.
func (m *EmStockWatchMutation) StockWatchFallPrice() (r string, exists bool) {
	v := m.stock_watch_fall_price
	if v == nil {
		return
	}
	return *v, true
}

// OldStockWatchFallPrice returns the old "stock_watch_fall_price" field's value of the EmStockWatch entity.
// If the EmStockWatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockWatchMutation) OldStockWatchFallPrice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStockWatchFallPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStockWatchFallPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStockWatchFallPrice: %w", err)
	}
	return oldValue.StockWatchFallPrice, nil
}

// ClearStockWatchFallPrice clears the value of the "stock_watch_fall_price" field.
func (m *EmStockWatchMutation) ClearStockWatchFallPrice() {
	m.stock_watch_fall_price = nil
	m.clearedFields[emstockwatch.FieldStockWatchFallPrice] = struct{}{}
}

// StockWatchFallPriceCleared returns if the "stock_watch_fall_price" field was cleared in this mutation.
func (m *EmStockWatchMutation) StockWatchFallPriceCleared() bool {
	_, ok := m.clearedFields[emstockwatch.FieldStockWatchFallPrice]
	return ok
}

// ResetStockWatchFallPrice resets all changes to the "stock_watch_fall_price" field.
func (m *EmStockWatchMutation) ResetStockWatchFallPrice() {
	m.stock_watch_fall_price = nil
	delete(m.clearedFields, emstockwatch.FieldStockWatchFallPrice)
}

// SetStockWatchUpChange sets the "stock_watch_up_change" field.
func (m *EmStockWatchMutation) SetStockWatchUpChange(s string) {
	m.stock_watch_up_change = &s
}

// StockWatchUpChange returns the value of the "stock_watch_up_change" field in the mutation.
func (m *EmStockWatchMutation) StockWatchUpChange() (r string, exists bool) {
	v := m.stock_watch_up_change
	if v == nil {
		return
	}
	return *v, true
}

// OldStockWatchUpChange returns the old "stock_watch_up_change" field's value of the EmStockWatch entity.
// If the EmStockWatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockWatchMutation) OldStockWatchUpChange(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStockWatchUpChange is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStockWatchUpChange requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStockWatchUpChange: %w", err)
	}
	return oldValue.StockWatchUpChange, nil
}

// ClearStockWatchUpChange clears the value of the "stock_watch_up_change" field.
func (m *EmStockWatchMutation) ClearStockWatchUpChange() {
	m.stock_watch_up_change = nil
	m.clearedFields[emstockwatch.FieldStockWatchUpChange] = struct{}{}
}

// StockWatchUpChangeCleared returns if the "stock_watch_up_change" field was cleared in this mutation.
func (m *EmStockWatchMutation) StockWatchUpChangeCleared() bool {
	_, ok := m.clearedFields[emstockwatch.FieldStockWatchUpChange]
	return ok
}

// ResetStockWatchUpChange resets all changes to the "stock_watch_up_change" field.
func (m *EmStockWatchMutation) ResetStockWatchUpChange() {
	m.stock_watch_up_change = nil
	delete(m.clearedFields, emstockwatch.FieldStockWatchUpChange)
}

// SetStockWatchFallChange sets the "stock_watch_fall_change" field.
func (m *EmStockWatchMutation) SetStockWatchFallChange(s string) {
	m.stock_watch_fall_change = &s
}

// StockWatchFallChange returns the value of the "stock_watch_fall_change" field in the mutation.
func (m *EmStockWatchMutation) StockWatchFallChange() (r string, exists bool) {
	v := m.stock_watch_fall_change
	if v == nil {
		return
	}
	return *v, true
}

// OldStockWatchFallChange returns the old "stock_watch_fall_change" field's value of the EmStockWatch entity.
// If the EmStockWatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmStockWatchMutation) OldStockWatchFallChange(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStockWatchFallChange is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStockWatchFallChange requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStockWatchFallChange: %w", err)
	}
	return oldValue.StockWatchFallChange, nil
}

// ClearStockWatchFallChange clears the value of the "stock_watch_fall_change" field.
func (m *EmStockWatchMutation) ClearStockWatchFallChange() {
	m.stock_watch_fall_change = nil
	m.clearedFields[emstockwatch.FieldStockWatchFallChange] = struct{}{}
}

// StockWatchFallChangeCleared returns if the "stock_watch_fall_change" field was cleared in this mutation.
func (m *EmStockWatchMutation) StockWatchFallChangeCleared() bool {
	_, ok := m.clearedFields[emstockwatch.FieldStockWatchFallChange]
	return ok
}

// ResetStockWatchFallChange resets all changes to the "stock_watch_fall_change" field.
func (m *EmStockWatchMutation) ResetStockWatchFallChange() {
	m.stock_watch_fall_change = nil
	delete(m.clearedFields, emstockwatch.FieldStockWatchFallChange)
}

// Where appends a list predicates to the EmStockWatchMutation builder.
func (m *EmStockWatchMutation) Where(ps ...predicate.EmStockWatch) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmStockWatchMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmStockWatchMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EmStockWatch, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmStockWatchMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmStockWatchMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EmStockWatch).
func (m *EmStockWatchMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmStockWatchMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.stock_watch_code != nil {
		fields = append(fields, emstockwatch.FieldStockWatchCode)
	}
	if m.stock_watch_name != nil {
		fields = append(fields, emstockwatch.FieldStockWatchName)
	}
	if m.stock_watch_up_price != nil {
		fields = append(fields, emstockwatch.FieldStockWatchUpPrice)
	}
	if m.stock_watch_fall_price != nil {
		fields = append(fields, emstockwatch.FieldStockWatchFallPrice)
	}
	if m.stock_watch_up_change != nil {
		fields = append(fields, emstockwatch.FieldStockWatchUpChange)
	}
	if m.stock_watch_fall_change != nil {
		fields = append(fields, emstockwatch.FieldStockWatchFallChange)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmStockWatchMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emstockwatch.FieldStockWatchCode:
		return m.StockWatchCode()
	case emstockwatch.FieldStockWatchName:
		return m.StockWatchName()
	case emstockwatch.FieldStockWatchUpPrice:
		return m.StockWatchUpPrice()
	case emstockwatch.FieldStockWatchFallPrice:
		return m.StockWatchFallPrice()
	case emstockwatch.FieldStockWatchUpChange:
		return m.StockWatchUpChange()
	case emstockwatch.FieldStockWatchFallChange:
		return m.StockWatchFallChange()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmStockWatchMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emstockwatch.FieldStockWatchCode:
		return m.OldStockWatchCode(ctx)
	case emstockwatch.FieldStockWatchName:
		return m.OldStockWatchName(ctx)
	case emstockwatch.FieldStockWatchUpPrice:
		return m.OldStockWatchUpPrice(ctx)
	case emstockwatch.FieldStockWatchFallPrice:
		return m.OldStockWatchFallPrice(ctx)
	case emstockwatch.FieldStockWatchUpChange:
		return m.OldStockWatchUpChange(ctx)
	case emstockwatch.FieldStockWatchFallChange:
		return m.OldStockWatchFallChange(ctx)
	}
	return nil, fmt.Errorf("unknown EmStockWatch field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmStockWatchMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emstockwatch.FieldStockWatchCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStockWatchCode(v)
		return nil
	case emstockwatch.FieldStockWatchName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStockWatchName(v)
		return nil
	case emstockwatch.FieldStockWatchUpPrice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStockWatchUpPrice(v)
		return nil
	case emstockwatch.FieldStockWatchFallPrice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStockWatchFallPrice(v)
		return nil
	case emstockwatch.FieldStockWatchUpChange:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStockWatchUpChange(v)
		return nil
	case emstockwatch.FieldStockWatchFallChange:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStockWatchFallChange(v)
		return nil
	}
	return fmt.Errorf("unknown EmStockWatch field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmStockWatchMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmStockWatchMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmStockWatchMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EmStockWatch numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmStockWatchMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(emstockwatch.FieldStockWatchCode) {
		fields = append(fields, emstockwatch.FieldStockWatchCode)
	}
	if m.FieldCleared(emstockwatch.FieldStockWatchName) {
		fields = append(fields, emstockwatch.FieldStockWatchName)
	}
	if m.FieldCleared(emstockwatch.FieldStockWatchUpPrice) {
		fields = append(fields, emstockwatch.FieldStockWatchUpPrice)
	}
	if m.FieldCleared(emstockwatch.FieldStockWatchFallPrice) {
		fields = append(fields, emstockwatch.FieldStockWatchFallPrice)
	}
	if m.FieldCleared(emstockwatch.FieldStockWatchUpChange) {
		fields = append(fields, emstockwatch.FieldStockWatchUpChange)
	}
	if m.FieldCleared(emstockwatch.FieldStockWatchFallChange) {
		fields = append(fields, emstockwatch.FieldStockWatchFallChange)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmStockWatchMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmStockWatchMutation) ClearField(name string) error {
	switch name {
	case emstockwatch.FieldStockWatchCode:
		m.ClearStockWatchCode()
		return nil
	case emstockwatch.FieldStockWatchName:
		m.ClearStockWatchName()
		return nil
	case emstockwatch.FieldStockWatchUpPrice:
		m.ClearStockWatchUpPrice()
		return nil
	case emstockwatch.FieldStockWatchFallPrice:
		m.ClearStockWatchFallPrice()
		return nil
	case emstockwatch.FieldStockWatchUpChange:
		m.ClearStockWatchUpChange()
		return nil
	case emstockwatch.FieldStockWatchFallChange:
		m.ClearStockWatchFallChange()
		return nil
	}
	return fmt.Errorf("unknown EmStockWatch nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmStockWatchMutation) ResetField(name string) error {
	switch name {
	case emstockwatch.FieldStockWatchCode:
		m.ResetStockWatchCode()
		return nil
	case emstockwatch.FieldStockWatchName:
		m.ResetStockWatchName()
		return nil
	case emstockwatch.FieldStockWatchUpPrice:
		m.ResetStockWatchUpPrice()
		return nil
	case emstockwatch.FieldStockWatchFallPrice:
		m.ResetStockWatchFallPrice()
		return nil
	case emstockwatch.FieldStockWatchUpChange:
		m.ResetStockWatchUpChange()
		return nil
	case emstockwatch.FieldStockWatchFallChange:
		m.ResetStockWatchFallChange()
		return nil
	}
	return fmt.Errorf("unknown EmStockWatch field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmStockWatchMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmStockWatchMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmStockWatchMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmStockWatchMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmStockWatchMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmStockWatchMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmStockWatchMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EmStockWatch unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmStockWatchMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EmStockWatch edge %s", name)
}
