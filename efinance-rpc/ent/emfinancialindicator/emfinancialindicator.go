// Code generated by ent, DO NOT EDIT.

package emfinancialindicator

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the emfinancialindicator type in the database.
	Label = "em_financial_indicator"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "financial_indicators_id"
	// FieldFinancialIndicatorsKey holds the string denoting the financial_indicators_key field in the database.
	FieldFinancialIndicatorsKey = "financial_indicators_key"
	// FieldFinancialIndicatorsValue holds the string denoting the financial_indicators_value field in the database.
	FieldFinancialIndicatorsValue = "financial_indicators_value"
	// FieldFinancialIndicatorsName holds the string denoting the financial_indicators_name field in the database.
	FieldFinancialIndicatorsName = "financial_indicators_name"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the emfinancialindicator in the database.
	Table = "em_financial_indicator"
)

// Columns holds all SQL columns for emfinancialindicator fields.
var Columns = []string{
	FieldID,
	FieldFinancialIndicatorsKey,
	FieldFinancialIndicatorsValue,
	FieldFinancialIndicatorsName,
	FieldCreateTime,
	FieldRemarks,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EmFinancialIndicator queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFinancialIndicatorsKey orders the results by the financial_indicators_key field.
func ByFinancialIndicatorsKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinancialIndicatorsKey, opts...).ToFunc()
}

// ByFinancialIndicatorsValue orders the results by the financial_indicators_value field.
func ByFinancialIndicatorsValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinancialIndicatorsValue, opts...).ToFunc()
}

// ByFinancialIndicatorsName orders the results by the financial_indicators_name field.
func ByFinancialIndicatorsName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinancialIndicatorsName, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByRemarks orders the results by the remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
