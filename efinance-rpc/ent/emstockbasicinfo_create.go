// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emstockbasicinfo"
)

// EmStockBasicInfoCreate is the builder for creating a EmStockBasicInfo entity.
type EmStockBasicInfoCreate struct {
	config
	mutation *EmStockBasicInfoMutation
	hooks    []Hook
}

// SetF1 sets the "f1" field.
func (esbic *EmStockBasicInfoCreate) SetF1(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF1(s)
	return esbic
}

// SetNillableF1 sets the "f1" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF1(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF1(*s)
	}
	return esbic
}

// SetF2 sets the "f2" field.
func (esbic *EmStockBasicInfoCreate) SetF2(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF2(s)
	return esbic
}

// SetNillableF2 sets the "f2" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF2(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF2(*s)
	}
	return esbic
}

// SetF3 sets the "f3" field.
func (esbic *EmStockBasicInfoCreate) SetF3(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF3(s)
	return esbic
}

// SetNillableF3 sets the "f3" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF3(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF3(*s)
	}
	return esbic
}

// SetF4 sets the "f4" field.
func (esbic *EmStockBasicInfoCreate) SetF4(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF4(s)
	return esbic
}

// SetNillableF4 sets the "f4" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF4(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF4(*s)
	}
	return esbic
}

// SetF5 sets the "f5" field.
func (esbic *EmStockBasicInfoCreate) SetF5(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF5(s)
	return esbic
}

// SetNillableF5 sets the "f5" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF5(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF5(*s)
	}
	return esbic
}

// SetF6 sets the "f6" field.
func (esbic *EmStockBasicInfoCreate) SetF6(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF6(s)
	return esbic
}

// SetNillableF6 sets the "f6" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF6(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF6(*s)
	}
	return esbic
}

// SetF7 sets the "f7" field.
func (esbic *EmStockBasicInfoCreate) SetF7(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF7(s)
	return esbic
}

// SetNillableF7 sets the "f7" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF7(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF7(*s)
	}
	return esbic
}

// SetF8 sets the "f8" field.
func (esbic *EmStockBasicInfoCreate) SetF8(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF8(s)
	return esbic
}

// SetNillableF8 sets the "f8" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF8(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF8(*s)
	}
	return esbic
}

// SetF9 sets the "f9" field.
func (esbic *EmStockBasicInfoCreate) SetF9(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF9(s)
	return esbic
}

// SetNillableF9 sets the "f9" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF9(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF9(*s)
	}
	return esbic
}

// SetF10 sets the "f10" field.
func (esbic *EmStockBasicInfoCreate) SetF10(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF10(s)
	return esbic
}

// SetNillableF10 sets the "f10" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF10(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF10(*s)
	}
	return esbic
}

// SetF11 sets the "f11" field.
func (esbic *EmStockBasicInfoCreate) SetF11(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF11(s)
	return esbic
}

// SetNillableF11 sets the "f11" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF11(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF11(*s)
	}
	return esbic
}

// SetF12 sets the "f12" field.
func (esbic *EmStockBasicInfoCreate) SetF12(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF12(s)
	return esbic
}

// SetNillableF12 sets the "f12" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF12(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF12(*s)
	}
	return esbic
}

// SetF13 sets the "f13" field.
func (esbic *EmStockBasicInfoCreate) SetF13(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF13(s)
	return esbic
}

// SetNillableF13 sets the "f13" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF13(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF13(*s)
	}
	return esbic
}

// SetF14 sets the "f14" field.
func (esbic *EmStockBasicInfoCreate) SetF14(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF14(s)
	return esbic
}

// SetNillableF14 sets the "f14" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF14(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF14(*s)
	}
	return esbic
}

// SetF15 sets the "f15" field.
func (esbic *EmStockBasicInfoCreate) SetF15(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF15(s)
	return esbic
}

// SetNillableF15 sets the "f15" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF15(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF15(*s)
	}
	return esbic
}

// SetF16 sets the "f16" field.
func (esbic *EmStockBasicInfoCreate) SetF16(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF16(s)
	return esbic
}

// SetNillableF16 sets the "f16" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF16(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF16(*s)
	}
	return esbic
}

// SetF17 sets the "f17" field.
func (esbic *EmStockBasicInfoCreate) SetF17(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF17(s)
	return esbic
}

// SetNillableF17 sets the "f17" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF17(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF17(*s)
	}
	return esbic
}

// SetF18 sets the "f18" field.
func (esbic *EmStockBasicInfoCreate) SetF18(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF18(s)
	return esbic
}

// SetNillableF18 sets the "f18" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF18(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF18(*s)
	}
	return esbic
}

// SetF19 sets the "f19" field.
func (esbic *EmStockBasicInfoCreate) SetF19(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF19(s)
	return esbic
}

// SetNillableF19 sets the "f19" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF19(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF19(*s)
	}
	return esbic
}

// SetF20 sets the "f20" field.
func (esbic *EmStockBasicInfoCreate) SetF20(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF20(s)
	return esbic
}

// SetNillableF20 sets the "f20" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF20(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF20(*s)
	}
	return esbic
}

// SetF21 sets the "f21" field.
func (esbic *EmStockBasicInfoCreate) SetF21(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF21(s)
	return esbic
}

// SetNillableF21 sets the "f21" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF21(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF21(*s)
	}
	return esbic
}

// SetF22 sets the "f22" field.
func (esbic *EmStockBasicInfoCreate) SetF22(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF22(s)
	return esbic
}

// SetNillableF22 sets the "f22" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF22(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF22(*s)
	}
	return esbic
}

// SetF23 sets the "f23" field.
func (esbic *EmStockBasicInfoCreate) SetF23(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF23(s)
	return esbic
}

// SetNillableF23 sets the "f23" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF23(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF23(*s)
	}
	return esbic
}

// SetF24 sets the "f24" field.
func (esbic *EmStockBasicInfoCreate) SetF24(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF24(s)
	return esbic
}

// SetNillableF24 sets the "f24" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF24(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF24(*s)
	}
	return esbic
}

// SetF25 sets the "f25" field.
func (esbic *EmStockBasicInfoCreate) SetF25(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF25(s)
	return esbic
}

// SetNillableF25 sets the "f25" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF25(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF25(*s)
	}
	return esbic
}

// SetF26 sets the "f26" field.
func (esbic *EmStockBasicInfoCreate) SetF26(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF26(s)
	return esbic
}

// SetNillableF26 sets the "f26" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF26(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF26(*s)
	}
	return esbic
}

// SetF27 sets the "f27" field.
func (esbic *EmStockBasicInfoCreate) SetF27(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF27(s)
	return esbic
}

// SetNillableF27 sets the "f27" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF27(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF27(*s)
	}
	return esbic
}

// SetF28 sets the "f28" field.
func (esbic *EmStockBasicInfoCreate) SetF28(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF28(s)
	return esbic
}

// SetNillableF28 sets the "f28" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF28(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF28(*s)
	}
	return esbic
}

// SetF29 sets the "f29" field.
func (esbic *EmStockBasicInfoCreate) SetF29(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF29(s)
	return esbic
}

// SetNillableF29 sets the "f29" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF29(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF29(*s)
	}
	return esbic
}

// SetF30 sets the "f30" field.
func (esbic *EmStockBasicInfoCreate) SetF30(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetF30(s)
	return esbic
}

// SetNillableF30 sets the "f30" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableF30(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetF30(*s)
	}
	return esbic
}

// SetCreateTime sets the "create_time" field.
func (esbic *EmStockBasicInfoCreate) SetCreateTime(t time.Time) *EmStockBasicInfoCreate {
	esbic.mutation.SetCreateTime(t)
	return esbic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableCreateTime(t *time.Time) *EmStockBasicInfoCreate {
	if t != nil {
		esbic.SetCreateTime(*t)
	}
	return esbic
}

// SetRemarks sets the "remarks" field.
func (esbic *EmStockBasicInfoCreate) SetRemarks(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetRemarks(s)
	return esbic
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableRemarks(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetRemarks(*s)
	}
	return esbic
}

// SetStatus sets the "status" field.
func (esbic *EmStockBasicInfoCreate) SetStatus(s string) *EmStockBasicInfoCreate {
	esbic.mutation.SetStatus(s)
	return esbic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableStatus(s *string) *EmStockBasicInfoCreate {
	if s != nil {
		esbic.SetStatus(*s)
	}
	return esbic
}

// SetSt1 sets the "st1" field.
func (esbic *EmStockBasicInfoCreate) SetSt1(i int32) *EmStockBasicInfoCreate {
	esbic.mutation.SetSt1(i)
	return esbic
}

// SetNillableSt1 sets the "st1" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableSt1(i *int32) *EmStockBasicInfoCreate {
	if i != nil {
		esbic.SetSt1(*i)
	}
	return esbic
}

// SetSt2 sets the "st2" field.
func (esbic *EmStockBasicInfoCreate) SetSt2(i int32) *EmStockBasicInfoCreate {
	esbic.mutation.SetSt2(i)
	return esbic
}

// SetNillableSt2 sets the "st2" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableSt2(i *int32) *EmStockBasicInfoCreate {
	if i != nil {
		esbic.SetSt2(*i)
	}
	return esbic
}

// SetSt3 sets the "st3" field.
func (esbic *EmStockBasicInfoCreate) SetSt3(i int32) *EmStockBasicInfoCreate {
	esbic.mutation.SetSt3(i)
	return esbic
}

// SetNillableSt3 sets the "st3" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableSt3(i *int32) *EmStockBasicInfoCreate {
	if i != nil {
		esbic.SetSt3(*i)
	}
	return esbic
}

// SetSt4 sets the "st4" field.
func (esbic *EmStockBasicInfoCreate) SetSt4(i int32) *EmStockBasicInfoCreate {
	esbic.mutation.SetSt4(i)
	return esbic
}

// SetNillableSt4 sets the "st4" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableSt4(i *int32) *EmStockBasicInfoCreate {
	if i != nil {
		esbic.SetSt4(*i)
	}
	return esbic
}

// SetSt5 sets the "st5" field.
func (esbic *EmStockBasicInfoCreate) SetSt5(i int32) *EmStockBasicInfoCreate {
	esbic.mutation.SetSt5(i)
	return esbic
}

// SetNillableSt5 sets the "st5" field if the given value is not nil.
func (esbic *EmStockBasicInfoCreate) SetNillableSt5(i *int32) *EmStockBasicInfoCreate {
	if i != nil {
		esbic.SetSt5(*i)
	}
	return esbic
}

// SetID sets the "id" field.
func (esbic *EmStockBasicInfoCreate) SetID(i int32) *EmStockBasicInfoCreate {
	esbic.mutation.SetID(i)
	return esbic
}

// Mutation returns the EmStockBasicInfoMutation object of the builder.
func (esbic *EmStockBasicInfoCreate) Mutation() *EmStockBasicInfoMutation {
	return esbic.mutation
}

// Save creates the EmStockBasicInfo in the database.
func (esbic *EmStockBasicInfoCreate) Save(ctx context.Context) (*EmStockBasicInfo, error) {
	return withHooks(ctx, esbic.sqlSave, esbic.mutation, esbic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (esbic *EmStockBasicInfoCreate) SaveX(ctx context.Context) *EmStockBasicInfo {
	v, err := esbic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esbic *EmStockBasicInfoCreate) Exec(ctx context.Context) error {
	_, err := esbic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esbic *EmStockBasicInfoCreate) ExecX(ctx context.Context) {
	if err := esbic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esbic *EmStockBasicInfoCreate) check() error {
	return nil
}

func (esbic *EmStockBasicInfoCreate) sqlSave(ctx context.Context) (*EmStockBasicInfo, error) {
	if err := esbic.check(); err != nil {
		return nil, err
	}
	_node, _spec := esbic.createSpec()
	if err := sqlgraph.CreateNode(ctx, esbic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	esbic.mutation.id = &_node.ID
	esbic.mutation.done = true
	return _node, nil
}

func (esbic *EmStockBasicInfoCreate) createSpec() (*EmStockBasicInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &EmStockBasicInfo{config: esbic.config}
		_spec = sqlgraph.NewCreateSpec(emstockbasicinfo.Table, sqlgraph.NewFieldSpec(emstockbasicinfo.FieldID, field.TypeInt32))
	)
	if id, ok := esbic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := esbic.mutation.F1(); ok {
		_spec.SetField(emstockbasicinfo.FieldF1, field.TypeString, value)
		_node.F1 = value
	}
	if value, ok := esbic.mutation.F2(); ok {
		_spec.SetField(emstockbasicinfo.FieldF2, field.TypeString, value)
		_node.F2 = value
	}
	if value, ok := esbic.mutation.F3(); ok {
		_spec.SetField(emstockbasicinfo.FieldF3, field.TypeString, value)
		_node.F3 = value
	}
	if value, ok := esbic.mutation.F4(); ok {
		_spec.SetField(emstockbasicinfo.FieldF4, field.TypeString, value)
		_node.F4 = value
	}
	if value, ok := esbic.mutation.F5(); ok {
		_spec.SetField(emstockbasicinfo.FieldF5, field.TypeString, value)
		_node.F5 = value
	}
	if value, ok := esbic.mutation.F6(); ok {
		_spec.SetField(emstockbasicinfo.FieldF6, field.TypeString, value)
		_node.F6 = value
	}
	if value, ok := esbic.mutation.F7(); ok {
		_spec.SetField(emstockbasicinfo.FieldF7, field.TypeString, value)
		_node.F7 = value
	}
	if value, ok := esbic.mutation.F8(); ok {
		_spec.SetField(emstockbasicinfo.FieldF8, field.TypeString, value)
		_node.F8 = value
	}
	if value, ok := esbic.mutation.F9(); ok {
		_spec.SetField(emstockbasicinfo.FieldF9, field.TypeString, value)
		_node.F9 = value
	}
	if value, ok := esbic.mutation.F10(); ok {
		_spec.SetField(emstockbasicinfo.FieldF10, field.TypeString, value)
		_node.F10 = value
	}
	if value, ok := esbic.mutation.F11(); ok {
		_spec.SetField(emstockbasicinfo.FieldF11, field.TypeString, value)
		_node.F11 = value
	}
	if value, ok := esbic.mutation.F12(); ok {
		_spec.SetField(emstockbasicinfo.FieldF12, field.TypeString, value)
		_node.F12 = value
	}
	if value, ok := esbic.mutation.F13(); ok {
		_spec.SetField(emstockbasicinfo.FieldF13, field.TypeString, value)
		_node.F13 = value
	}
	if value, ok := esbic.mutation.F14(); ok {
		_spec.SetField(emstockbasicinfo.FieldF14, field.TypeString, value)
		_node.F14 = value
	}
	if value, ok := esbic.mutation.F15(); ok {
		_spec.SetField(emstockbasicinfo.FieldF15, field.TypeString, value)
		_node.F15 = value
	}
	if value, ok := esbic.mutation.F16(); ok {
		_spec.SetField(emstockbasicinfo.FieldF16, field.TypeString, value)
		_node.F16 = value
	}
	if value, ok := esbic.mutation.F17(); ok {
		_spec.SetField(emstockbasicinfo.FieldF17, field.TypeString, value)
		_node.F17 = value
	}
	if value, ok := esbic.mutation.F18(); ok {
		_spec.SetField(emstockbasicinfo.FieldF18, field.TypeString, value)
		_node.F18 = value
	}
	if value, ok := esbic.mutation.F19(); ok {
		_spec.SetField(emstockbasicinfo.FieldF19, field.TypeString, value)
		_node.F19 = value
	}
	if value, ok := esbic.mutation.F20(); ok {
		_spec.SetField(emstockbasicinfo.FieldF20, field.TypeString, value)
		_node.F20 = value
	}
	if value, ok := esbic.mutation.F21(); ok {
		_spec.SetField(emstockbasicinfo.FieldF21, field.TypeString, value)
		_node.F21 = value
	}
	if value, ok := esbic.mutation.F22(); ok {
		_spec.SetField(emstockbasicinfo.FieldF22, field.TypeString, value)
		_node.F22 = value
	}
	if value, ok := esbic.mutation.F23(); ok {
		_spec.SetField(emstockbasicinfo.FieldF23, field.TypeString, value)
		_node.F23 = value
	}
	if value, ok := esbic.mutation.F24(); ok {
		_spec.SetField(emstockbasicinfo.FieldF24, field.TypeString, value)
		_node.F24 = value
	}
	if value, ok := esbic.mutation.F25(); ok {
		_spec.SetField(emstockbasicinfo.FieldF25, field.TypeString, value)
		_node.F25 = value
	}
	if value, ok := esbic.mutation.F26(); ok {
		_spec.SetField(emstockbasicinfo.FieldF26, field.TypeString, value)
		_node.F26 = value
	}
	if value, ok := esbic.mutation.F27(); ok {
		_spec.SetField(emstockbasicinfo.FieldF27, field.TypeString, value)
		_node.F27 = value
	}
	if value, ok := esbic.mutation.F28(); ok {
		_spec.SetField(emstockbasicinfo.FieldF28, field.TypeString, value)
		_node.F28 = value
	}
	if value, ok := esbic.mutation.F29(); ok {
		_spec.SetField(emstockbasicinfo.FieldF29, field.TypeString, value)
		_node.F29 = value
	}
	if value, ok := esbic.mutation.F30(); ok {
		_spec.SetField(emstockbasicinfo.FieldF30, field.TypeString, value)
		_node.F30 = value
	}
	if value, ok := esbic.mutation.CreateTime(); ok {
		_spec.SetField(emstockbasicinfo.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := esbic.mutation.Remarks(); ok {
		_spec.SetField(emstockbasicinfo.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := esbic.mutation.Status(); ok {
		_spec.SetField(emstockbasicinfo.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := esbic.mutation.St1(); ok {
		_spec.SetField(emstockbasicinfo.FieldSt1, field.TypeInt32, value)
		_node.St1 = value
	}
	if value, ok := esbic.mutation.St2(); ok {
		_spec.SetField(emstockbasicinfo.FieldSt2, field.TypeInt32, value)
		_node.St2 = value
	}
	if value, ok := esbic.mutation.St3(); ok {
		_spec.SetField(emstockbasicinfo.FieldSt3, field.TypeInt32, value)
		_node.St3 = value
	}
	if value, ok := esbic.mutation.St4(); ok {
		_spec.SetField(emstockbasicinfo.FieldSt4, field.TypeInt32, value)
		_node.St4 = value
	}
	if value, ok := esbic.mutation.St5(); ok {
		_spec.SetField(emstockbasicinfo.FieldSt5, field.TypeInt32, value)
		_node.St5 = value
	}
	return _node, _spec
}

// EmStockBasicInfoCreateBulk is the builder for creating many EmStockBasicInfo entities in bulk.
type EmStockBasicInfoCreateBulk struct {
	config
	err      error
	builders []*EmStockBasicInfoCreate
}

// Save creates the EmStockBasicInfo entities in the database.
func (esbicb *EmStockBasicInfoCreateBulk) Save(ctx context.Context) ([]*EmStockBasicInfo, error) {
	if esbicb.err != nil {
		return nil, esbicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(esbicb.builders))
	nodes := make([]*EmStockBasicInfo, len(esbicb.builders))
	mutators := make([]Mutator, len(esbicb.builders))
	for i := range esbicb.builders {
		func(i int, root context.Context) {
			builder := esbicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmStockBasicInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, esbicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, esbicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, esbicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (esbicb *EmStockBasicInfoCreateBulk) SaveX(ctx context.Context) []*EmStockBasicInfo {
	v, err := esbicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esbicb *EmStockBasicInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := esbicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esbicb *EmStockBasicInfoCreateBulk) ExecX(ctx context.Context) {
	if err := esbicb.Exec(ctx); err != nil {
		panic(err)
	}
}
