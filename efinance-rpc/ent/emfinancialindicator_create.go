// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emfinancialindicator"
)

// EmFinancialIndicatorCreate is the builder for creating a EmFinancialIndicator entity.
type EmFinancialIndicatorCreate struct {
	config
	mutation *EmFinancialIndicatorMutation
	hooks    []Hook
}

// SetFinancialIndicatorsKey sets the "financial_indicators_key" field.
func (efic *EmFinancialIndicatorCreate) SetFinancialIndicatorsKey(s string) *EmFinancialIndicatorCreate {
	efic.mutation.SetFinancialIndicatorsKey(s)
	return efic
}

// SetNillableFinancialIndicatorsKey sets the "financial_indicators_key" field if the given value is not nil.
func (efic *EmFinancialIndicatorCreate) SetNillableFinancialIndicatorsKey(s *string) *EmFinancialIndicatorCreate {
	if s != nil {
		efic.SetFinancialIndicatorsKey(*s)
	}
	return efic
}

// SetFinancialIndicatorsValue sets the "financial_indicators_value" field.
func (efic *EmFinancialIndicatorCreate) SetFinancialIndicatorsValue(s string) *EmFinancialIndicatorCreate {
	efic.mutation.SetFinancialIndicatorsValue(s)
	return efic
}

// SetNillableFinancialIndicatorsValue sets the "financial_indicators_value" field if the given value is not nil.
func (efic *EmFinancialIndicatorCreate) SetNillableFinancialIndicatorsValue(s *string) *EmFinancialIndicatorCreate {
	if s != nil {
		efic.SetFinancialIndicatorsValue(*s)
	}
	return efic
}

// SetFinancialIndicatorsName sets the "financial_indicators_name" field.
func (efic *EmFinancialIndicatorCreate) SetFinancialIndicatorsName(s string) *EmFinancialIndicatorCreate {
	efic.mutation.SetFinancialIndicatorsName(s)
	return efic
}

// SetNillableFinancialIndicatorsName sets the "financial_indicators_name" field if the given value is not nil.
func (efic *EmFinancialIndicatorCreate) SetNillableFinancialIndicatorsName(s *string) *EmFinancialIndicatorCreate {
	if s != nil {
		efic.SetFinancialIndicatorsName(*s)
	}
	return efic
}

// SetCreateTime sets the "create_time" field.
func (efic *EmFinancialIndicatorCreate) SetCreateTime(t time.Time) *EmFinancialIndicatorCreate {
	efic.mutation.SetCreateTime(t)
	return efic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (efic *EmFinancialIndicatorCreate) SetNillableCreateTime(t *time.Time) *EmFinancialIndicatorCreate {
	if t != nil {
		efic.SetCreateTime(*t)
	}
	return efic
}

// SetRemarks sets the "remarks" field.
func (efic *EmFinancialIndicatorCreate) SetRemarks(s string) *EmFinancialIndicatorCreate {
	efic.mutation.SetRemarks(s)
	return efic
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (efic *EmFinancialIndicatorCreate) SetNillableRemarks(s *string) *EmFinancialIndicatorCreate {
	if s != nil {
		efic.SetRemarks(*s)
	}
	return efic
}

// SetStatus sets the "status" field.
func (efic *EmFinancialIndicatorCreate) SetStatus(s string) *EmFinancialIndicatorCreate {
	efic.mutation.SetStatus(s)
	return efic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (efic *EmFinancialIndicatorCreate) SetNillableStatus(s *string) *EmFinancialIndicatorCreate {
	if s != nil {
		efic.SetStatus(*s)
	}
	return efic
}

// SetID sets the "id" field.
func (efic *EmFinancialIndicatorCreate) SetID(i int32) *EmFinancialIndicatorCreate {
	efic.mutation.SetID(i)
	return efic
}

// Mutation returns the EmFinancialIndicatorMutation object of the builder.
func (efic *EmFinancialIndicatorCreate) Mutation() *EmFinancialIndicatorMutation {
	return efic.mutation
}

// Save creates the EmFinancialIndicator in the database.
func (efic *EmFinancialIndicatorCreate) Save(ctx context.Context) (*EmFinancialIndicator, error) {
	return withHooks(ctx, efic.sqlSave, efic.mutation, efic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (efic *EmFinancialIndicatorCreate) SaveX(ctx context.Context) *EmFinancialIndicator {
	v, err := efic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (efic *EmFinancialIndicatorCreate) Exec(ctx context.Context) error {
	_, err := efic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efic *EmFinancialIndicatorCreate) ExecX(ctx context.Context) {
	if err := efic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (efic *EmFinancialIndicatorCreate) check() error {
	return nil
}

func (efic *EmFinancialIndicatorCreate) sqlSave(ctx context.Context) (*EmFinancialIndicator, error) {
	if err := efic.check(); err != nil {
		return nil, err
	}
	_node, _spec := efic.createSpec()
	if err := sqlgraph.CreateNode(ctx, efic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	efic.mutation.id = &_node.ID
	efic.mutation.done = true
	return _node, nil
}

func (efic *EmFinancialIndicatorCreate) createSpec() (*EmFinancialIndicator, *sqlgraph.CreateSpec) {
	var (
		_node = &EmFinancialIndicator{config: efic.config}
		_spec = sqlgraph.NewCreateSpec(emfinancialindicator.Table, sqlgraph.NewFieldSpec(emfinancialindicator.FieldID, field.TypeInt32))
	)
	if id, ok := efic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := efic.mutation.FinancialIndicatorsKey(); ok {
		_spec.SetField(emfinancialindicator.FieldFinancialIndicatorsKey, field.TypeString, value)
		_node.FinancialIndicatorsKey = value
	}
	if value, ok := efic.mutation.FinancialIndicatorsValue(); ok {
		_spec.SetField(emfinancialindicator.FieldFinancialIndicatorsValue, field.TypeString, value)
		_node.FinancialIndicatorsValue = value
	}
	if value, ok := efic.mutation.FinancialIndicatorsName(); ok {
		_spec.SetField(emfinancialindicator.FieldFinancialIndicatorsName, field.TypeString, value)
		_node.FinancialIndicatorsName = value
	}
	if value, ok := efic.mutation.CreateTime(); ok {
		_spec.SetField(emfinancialindicator.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := efic.mutation.Remarks(); ok {
		_spec.SetField(emfinancialindicator.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := efic.mutation.Status(); ok {
		_spec.SetField(emfinancialindicator.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	return _node, _spec
}

// EmFinancialIndicatorCreateBulk is the builder for creating many EmFinancialIndicator entities in bulk.
type EmFinancialIndicatorCreateBulk struct {
	config
	err      error
	builders []*EmFinancialIndicatorCreate
}

// Save creates the EmFinancialIndicator entities in the database.
func (eficb *EmFinancialIndicatorCreateBulk) Save(ctx context.Context) ([]*EmFinancialIndicator, error) {
	if eficb.err != nil {
		return nil, eficb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eficb.builders))
	nodes := make([]*EmFinancialIndicator, len(eficb.builders))
	mutators := make([]Mutator, len(eficb.builders))
	for i := range eficb.builders {
		func(i int, root context.Context) {
			builder := eficb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmFinancialIndicatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eficb *EmFinancialIndicatorCreateBulk) SaveX(ctx context.Context) []*EmFinancialIndicator {
	v, err := eficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eficb *EmFinancialIndicatorCreateBulk) Exec(ctx context.Context) error {
	_, err := eficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eficb *EmFinancialIndicatorCreateBulk) ExecX(ctx context.Context) {
	if err := eficb.Exec(ctx); err != nil {
		panic(err)
	}
}
