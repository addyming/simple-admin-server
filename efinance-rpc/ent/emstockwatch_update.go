// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emstockwatch"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/predicate"
)

// EmStockWatchUpdate is the builder for updating EmStockWatch entities.
type EmStockWatchUpdate struct {
	config
	hooks    []Hook
	mutation *EmStockWatchMutation
}

// Where appends a list predicates to the EmStockWatchUpdate builder.
func (eswu *EmStockWatchUpdate) Where(ps ...predicate.EmStockWatch) *EmStockWatchUpdate {
	eswu.mutation.Where(ps...)
	return eswu
}

// SetStockWatchCode sets the "stock_watch_code" field.
func (eswu *EmStockWatchUpdate) SetStockWatchCode(s string) *EmStockWatchUpdate {
	eswu.mutation.SetStockWatchCode(s)
	return eswu
}

// SetNillableStockWatchCode sets the "stock_watch_code" field if the given value is not nil.
func (eswu *EmStockWatchUpdate) SetNillableStockWatchCode(s *string) *EmStockWatchUpdate {
	if s != nil {
		eswu.SetStockWatchCode(*s)
	}
	return eswu
}

// ClearStockWatchCode clears the value of the "stock_watch_code" field.
func (eswu *EmStockWatchUpdate) ClearStockWatchCode() *EmStockWatchUpdate {
	eswu.mutation.ClearStockWatchCode()
	return eswu
}

// SetStockWatchName sets the "stock_watch_name" field.
func (eswu *EmStockWatchUpdate) SetStockWatchName(s string) *EmStockWatchUpdate {
	eswu.mutation.SetStockWatchName(s)
	return eswu
}

// SetNillableStockWatchName sets the "stock_watch_name" field if the given value is not nil.
func (eswu *EmStockWatchUpdate) SetNillableStockWatchName(s *string) *EmStockWatchUpdate {
	if s != nil {
		eswu.SetStockWatchName(*s)
	}
	return eswu
}

// ClearStockWatchName clears the value of the "stock_watch_name" field.
func (eswu *EmStockWatchUpdate) ClearStockWatchName() *EmStockWatchUpdate {
	eswu.mutation.ClearStockWatchName()
	return eswu
}

// SetStockWatchUpPrice sets the "stock_watch_up_price" field.
func (eswu *EmStockWatchUpdate) SetStockWatchUpPrice(s string) *EmStockWatchUpdate {
	eswu.mutation.SetStockWatchUpPrice(s)
	return eswu
}

// SetNillableStockWatchUpPrice sets the "stock_watch_up_price" field if the given value is not nil.
func (eswu *EmStockWatchUpdate) SetNillableStockWatchUpPrice(s *string) *EmStockWatchUpdate {
	if s != nil {
		eswu.SetStockWatchUpPrice(*s)
	}
	return eswu
}

// ClearStockWatchUpPrice clears the value of the "stock_watch_up_price" field.
func (eswu *EmStockWatchUpdate) ClearStockWatchUpPrice() *EmStockWatchUpdate {
	eswu.mutation.ClearStockWatchUpPrice()
	return eswu
}

// SetStockWatchFallPrice sets the "stock_watch_fall_price" field.
func (eswu *EmStockWatchUpdate) SetStockWatchFallPrice(s string) *EmStockWatchUpdate {
	eswu.mutation.SetStockWatchFallPrice(s)
	return eswu
}

// SetNillableStockWatchFallPrice sets the "stock_watch_fall_price" field if the given value is not nil.
func (eswu *EmStockWatchUpdate) SetNillableStockWatchFallPrice(s *string) *EmStockWatchUpdate {
	if s != nil {
		eswu.SetStockWatchFallPrice(*s)
	}
	return eswu
}

// ClearStockWatchFallPrice clears the value of the "stock_watch_fall_price" field.
func (eswu *EmStockWatchUpdate) ClearStockWatchFallPrice() *EmStockWatchUpdate {
	eswu.mutation.ClearStockWatchFallPrice()
	return eswu
}

// SetStockWatchUpChange sets the "stock_watch_up_change" field.
func (eswu *EmStockWatchUpdate) SetStockWatchUpChange(s string) *EmStockWatchUpdate {
	eswu.mutation.SetStockWatchUpChange(s)
	return eswu
}

// SetNillableStockWatchUpChange sets the "stock_watch_up_change" field if the given value is not nil.
func (eswu *EmStockWatchUpdate) SetNillableStockWatchUpChange(s *string) *EmStockWatchUpdate {
	if s != nil {
		eswu.SetStockWatchUpChange(*s)
	}
	return eswu
}

// ClearStockWatchUpChange clears the value of the "stock_watch_up_change" field.
func (eswu *EmStockWatchUpdate) ClearStockWatchUpChange() *EmStockWatchUpdate {
	eswu.mutation.ClearStockWatchUpChange()
	return eswu
}

// SetStockWatchFallChange sets the "stock_watch_fall_change" field.
func (eswu *EmStockWatchUpdate) SetStockWatchFallChange(s string) *EmStockWatchUpdate {
	eswu.mutation.SetStockWatchFallChange(s)
	return eswu
}

// SetNillableStockWatchFallChange sets the "stock_watch_fall_change" field if the given value is not nil.
func (eswu *EmStockWatchUpdate) SetNillableStockWatchFallChange(s *string) *EmStockWatchUpdate {
	if s != nil {
		eswu.SetStockWatchFallChange(*s)
	}
	return eswu
}

// ClearStockWatchFallChange clears the value of the "stock_watch_fall_change" field.
func (eswu *EmStockWatchUpdate) ClearStockWatchFallChange() *EmStockWatchUpdate {
	eswu.mutation.ClearStockWatchFallChange()
	return eswu
}

// Mutation returns the EmStockWatchMutation object of the builder.
func (eswu *EmStockWatchUpdate) Mutation() *EmStockWatchMutation {
	return eswu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eswu *EmStockWatchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eswu.sqlSave, eswu.mutation, eswu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eswu *EmStockWatchUpdate) SaveX(ctx context.Context) int {
	affected, err := eswu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eswu *EmStockWatchUpdate) Exec(ctx context.Context) error {
	_, err := eswu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eswu *EmStockWatchUpdate) ExecX(ctx context.Context) {
	if err := eswu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eswu *EmStockWatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(emstockwatch.Table, emstockwatch.Columns, sqlgraph.NewFieldSpec(emstockwatch.FieldID, field.TypeInt32))
	if ps := eswu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eswu.mutation.StockWatchCode(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchCode, field.TypeString, value)
	}
	if eswu.mutation.StockWatchCodeCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchCode, field.TypeString)
	}
	if value, ok := eswu.mutation.StockWatchName(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchName, field.TypeString, value)
	}
	if eswu.mutation.StockWatchNameCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchName, field.TypeString)
	}
	if value, ok := eswu.mutation.StockWatchUpPrice(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchUpPrice, field.TypeString, value)
	}
	if eswu.mutation.StockWatchUpPriceCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchUpPrice, field.TypeString)
	}
	if value, ok := eswu.mutation.StockWatchFallPrice(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchFallPrice, field.TypeString, value)
	}
	if eswu.mutation.StockWatchFallPriceCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchFallPrice, field.TypeString)
	}
	if value, ok := eswu.mutation.StockWatchUpChange(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchUpChange, field.TypeString, value)
	}
	if eswu.mutation.StockWatchUpChangeCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchUpChange, field.TypeString)
	}
	if value, ok := eswu.mutation.StockWatchFallChange(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchFallChange, field.TypeString, value)
	}
	if eswu.mutation.StockWatchFallChangeCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchFallChange, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eswu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emstockwatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eswu.mutation.done = true
	return n, nil
}

// EmStockWatchUpdateOne is the builder for updating a single EmStockWatch entity.
type EmStockWatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmStockWatchMutation
}

// SetStockWatchCode sets the "stock_watch_code" field.
func (eswuo *EmStockWatchUpdateOne) SetStockWatchCode(s string) *EmStockWatchUpdateOne {
	eswuo.mutation.SetStockWatchCode(s)
	return eswuo
}

// SetNillableStockWatchCode sets the "stock_watch_code" field if the given value is not nil.
func (eswuo *EmStockWatchUpdateOne) SetNillableStockWatchCode(s *string) *EmStockWatchUpdateOne {
	if s != nil {
		eswuo.SetStockWatchCode(*s)
	}
	return eswuo
}

// ClearStockWatchCode clears the value of the "stock_watch_code" field.
func (eswuo *EmStockWatchUpdateOne) ClearStockWatchCode() *EmStockWatchUpdateOne {
	eswuo.mutation.ClearStockWatchCode()
	return eswuo
}

// SetStockWatchName sets the "stock_watch_name" field.
func (eswuo *EmStockWatchUpdateOne) SetStockWatchName(s string) *EmStockWatchUpdateOne {
	eswuo.mutation.SetStockWatchName(s)
	return eswuo
}

// SetNillableStockWatchName sets the "stock_watch_name" field if the given value is not nil.
func (eswuo *EmStockWatchUpdateOne) SetNillableStockWatchName(s *string) *EmStockWatchUpdateOne {
	if s != nil {
		eswuo.SetStockWatchName(*s)
	}
	return eswuo
}

// ClearStockWatchName clears the value of the "stock_watch_name" field.
func (eswuo *EmStockWatchUpdateOne) ClearStockWatchName() *EmStockWatchUpdateOne {
	eswuo.mutation.ClearStockWatchName()
	return eswuo
}

// SetStockWatchUpPrice sets the "stock_watch_up_price" field.
func (eswuo *EmStockWatchUpdateOne) SetStockWatchUpPrice(s string) *EmStockWatchUpdateOne {
	eswuo.mutation.SetStockWatchUpPrice(s)
	return eswuo
}

// SetNillableStockWatchUpPrice sets the "stock_watch_up_price" field if the given value is not nil.
func (eswuo *EmStockWatchUpdateOne) SetNillableStockWatchUpPrice(s *string) *EmStockWatchUpdateOne {
	if s != nil {
		eswuo.SetStockWatchUpPrice(*s)
	}
	return eswuo
}

// ClearStockWatchUpPrice clears the value of the "stock_watch_up_price" field.
func (eswuo *EmStockWatchUpdateOne) ClearStockWatchUpPrice() *EmStockWatchUpdateOne {
	eswuo.mutation.ClearStockWatchUpPrice()
	return eswuo
}

// SetStockWatchFallPrice sets the "stock_watch_fall_price" field.
func (eswuo *EmStockWatchUpdateOne) SetStockWatchFallPrice(s string) *EmStockWatchUpdateOne {
	eswuo.mutation.SetStockWatchFallPrice(s)
	return eswuo
}

// SetNillableStockWatchFallPrice sets the "stock_watch_fall_price" field if the given value is not nil.
func (eswuo *EmStockWatchUpdateOne) SetNillableStockWatchFallPrice(s *string) *EmStockWatchUpdateOne {
	if s != nil {
		eswuo.SetStockWatchFallPrice(*s)
	}
	return eswuo
}

// ClearStockWatchFallPrice clears the value of the "stock_watch_fall_price" field.
func (eswuo *EmStockWatchUpdateOne) ClearStockWatchFallPrice() *EmStockWatchUpdateOne {
	eswuo.mutation.ClearStockWatchFallPrice()
	return eswuo
}

// SetStockWatchUpChange sets the "stock_watch_up_change" field.
func (eswuo *EmStockWatchUpdateOne) SetStockWatchUpChange(s string) *EmStockWatchUpdateOne {
	eswuo.mutation.SetStockWatchUpChange(s)
	return eswuo
}

// SetNillableStockWatchUpChange sets the "stock_watch_up_change" field if the given value is not nil.
func (eswuo *EmStockWatchUpdateOne) SetNillableStockWatchUpChange(s *string) *EmStockWatchUpdateOne {
	if s != nil {
		eswuo.SetStockWatchUpChange(*s)
	}
	return eswuo
}

// ClearStockWatchUpChange clears the value of the "stock_watch_up_change" field.
func (eswuo *EmStockWatchUpdateOne) ClearStockWatchUpChange() *EmStockWatchUpdateOne {
	eswuo.mutation.ClearStockWatchUpChange()
	return eswuo
}

// SetStockWatchFallChange sets the "stock_watch_fall_change" field.
func (eswuo *EmStockWatchUpdateOne) SetStockWatchFallChange(s string) *EmStockWatchUpdateOne {
	eswuo.mutation.SetStockWatchFallChange(s)
	return eswuo
}

// SetNillableStockWatchFallChange sets the "stock_watch_fall_change" field if the given value is not nil.
func (eswuo *EmStockWatchUpdateOne) SetNillableStockWatchFallChange(s *string) *EmStockWatchUpdateOne {
	if s != nil {
		eswuo.SetStockWatchFallChange(*s)
	}
	return eswuo
}

// ClearStockWatchFallChange clears the value of the "stock_watch_fall_change" field.
func (eswuo *EmStockWatchUpdateOne) ClearStockWatchFallChange() *EmStockWatchUpdateOne {
	eswuo.mutation.ClearStockWatchFallChange()
	return eswuo
}

// Mutation returns the EmStockWatchMutation object of the builder.
func (eswuo *EmStockWatchUpdateOne) Mutation() *EmStockWatchMutation {
	return eswuo.mutation
}

// Where appends a list predicates to the EmStockWatchUpdate builder.
func (eswuo *EmStockWatchUpdateOne) Where(ps ...predicate.EmStockWatch) *EmStockWatchUpdateOne {
	eswuo.mutation.Where(ps...)
	return eswuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eswuo *EmStockWatchUpdateOne) Select(field string, fields ...string) *EmStockWatchUpdateOne {
	eswuo.fields = append([]string{field}, fields...)
	return eswuo
}

// Save executes the query and returns the updated EmStockWatch entity.
func (eswuo *EmStockWatchUpdateOne) Save(ctx context.Context) (*EmStockWatch, error) {
	return withHooks(ctx, eswuo.sqlSave, eswuo.mutation, eswuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eswuo *EmStockWatchUpdateOne) SaveX(ctx context.Context) *EmStockWatch {
	node, err := eswuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eswuo *EmStockWatchUpdateOne) Exec(ctx context.Context) error {
	_, err := eswuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eswuo *EmStockWatchUpdateOne) ExecX(ctx context.Context) {
	if err := eswuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eswuo *EmStockWatchUpdateOne) sqlSave(ctx context.Context) (_node *EmStockWatch, err error) {
	_spec := sqlgraph.NewUpdateSpec(emstockwatch.Table, emstockwatch.Columns, sqlgraph.NewFieldSpec(emstockwatch.FieldID, field.TypeInt32))
	id, ok := eswuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmStockWatch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eswuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emstockwatch.FieldID)
		for _, f := range fields {
			if !emstockwatch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emstockwatch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eswuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eswuo.mutation.StockWatchCode(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchCode, field.TypeString, value)
	}
	if eswuo.mutation.StockWatchCodeCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchCode, field.TypeString)
	}
	if value, ok := eswuo.mutation.StockWatchName(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchName, field.TypeString, value)
	}
	if eswuo.mutation.StockWatchNameCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchName, field.TypeString)
	}
	if value, ok := eswuo.mutation.StockWatchUpPrice(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchUpPrice, field.TypeString, value)
	}
	if eswuo.mutation.StockWatchUpPriceCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchUpPrice, field.TypeString)
	}
	if value, ok := eswuo.mutation.StockWatchFallPrice(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchFallPrice, field.TypeString, value)
	}
	if eswuo.mutation.StockWatchFallPriceCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchFallPrice, field.TypeString)
	}
	if value, ok := eswuo.mutation.StockWatchUpChange(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchUpChange, field.TypeString, value)
	}
	if eswuo.mutation.StockWatchUpChangeCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchUpChange, field.TypeString)
	}
	if value, ok := eswuo.mutation.StockWatchFallChange(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchFallChange, field.TypeString, value)
	}
	if eswuo.mutation.StockWatchFallChangeCleared() {
		_spec.ClearField(emstockwatch.FieldStockWatchFallChange, field.TypeString)
	}
	_node = &EmStockWatch{config: eswuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eswuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emstockwatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eswuo.mutation.done = true
	return _node, nil
}
