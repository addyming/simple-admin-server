// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emstockbasicinfo"
)

// EmStockBasicInfo is the model entity for the EmStockBasicInfo schema.
type EmStockBasicInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// F1 holds the value of the "f1" field.
	F1 string `json:"f1,omitempty"`
	// F2 holds the value of the "f2" field.
	F2 string `json:"f2,omitempty"`
	// F3 holds the value of the "f3" field.
	F3 string `json:"f3,omitempty"`
	// F4 holds the value of the "f4" field.
	F4 string `json:"f4,omitempty"`
	// F5 holds the value of the "f5" field.
	F5 string `json:"f5,omitempty"`
	// F6 holds the value of the "f6" field.
	F6 string `json:"f6,omitempty"`
	// F7 holds the value of the "f7" field.
	F7 string `json:"f7,omitempty"`
	// F8 holds the value of the "f8" field.
	F8 string `json:"f8,omitempty"`
	// F9 holds the value of the "f9" field.
	F9 string `json:"f9,omitempty"`
	// F10 holds the value of the "f10" field.
	F10 string `json:"f10,omitempty"`
	// F11 holds the value of the "f11" field.
	F11 string `json:"f11,omitempty"`
	// F12 holds the value of the "f12" field.
	F12 string `json:"f12,omitempty"`
	// F13 holds the value of the "f13" field.
	F13 string `json:"f13,omitempty"`
	// F14 holds the value of the "f14" field.
	F14 string `json:"f14,omitempty"`
	// F15 holds the value of the "f15" field.
	F15 string `json:"f15,omitempty"`
	// F16 holds the value of the "f16" field.
	F16 string `json:"f16,omitempty"`
	// F17 holds the value of the "f17" field.
	F17 string `json:"f17,omitempty"`
	// F18 holds the value of the "f18" field.
	F18 string `json:"f18,omitempty"`
	// F19 holds the value of the "f19" field.
	F19 string `json:"f19,omitempty"`
	// F20 holds the value of the "f20" field.
	F20 string `json:"f20,omitempty"`
	// F21 holds the value of the "f21" field.
	F21 string `json:"f21,omitempty"`
	// F22 holds the value of the "f22" field.
	F22 string `json:"f22,omitempty"`
	// F23 holds the value of the "f23" field.
	F23 string `json:"f23,omitempty"`
	// F24 holds the value of the "f24" field.
	F24 string `json:"f24,omitempty"`
	// F25 holds the value of the "f25" field.
	F25 string `json:"f25,omitempty"`
	// F26 holds the value of the "f26" field.
	F26 string `json:"f26,omitempty"`
	// F27 holds the value of the "f27" field.
	F27 string `json:"f27,omitempty"`
	// F28 holds the value of the "f28" field.
	F28 string `json:"f28,omitempty"`
	// F29 holds the value of the "f29" field.
	F29 string `json:"f29,omitempty"`
	// F30 holds the value of the "f30" field.
	F30 string `json:"f30,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// St1 holds the value of the "st1" field.
	St1 int32 `json:"st1,omitempty"`
	// St2 holds the value of the "st2" field.
	St2 int32 `json:"st2,omitempty"`
	// St3 holds the value of the "st3" field.
	St3 int32 `json:"st3,omitempty"`
	// St4 holds the value of the "st4" field.
	St4 int32 `json:"st4,omitempty"`
	// St5 holds the value of the "st5" field.
	St5          int32 `json:"st5,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmStockBasicInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emstockbasicinfo.FieldID, emstockbasicinfo.FieldSt1, emstockbasicinfo.FieldSt2, emstockbasicinfo.FieldSt3, emstockbasicinfo.FieldSt4, emstockbasicinfo.FieldSt5:
			values[i] = new(sql.NullInt64)
		case emstockbasicinfo.FieldF1, emstockbasicinfo.FieldF2, emstockbasicinfo.FieldF3, emstockbasicinfo.FieldF4, emstockbasicinfo.FieldF5, emstockbasicinfo.FieldF6, emstockbasicinfo.FieldF7, emstockbasicinfo.FieldF8, emstockbasicinfo.FieldF9, emstockbasicinfo.FieldF10, emstockbasicinfo.FieldF11, emstockbasicinfo.FieldF12, emstockbasicinfo.FieldF13, emstockbasicinfo.FieldF14, emstockbasicinfo.FieldF15, emstockbasicinfo.FieldF16, emstockbasicinfo.FieldF17, emstockbasicinfo.FieldF18, emstockbasicinfo.FieldF19, emstockbasicinfo.FieldF20, emstockbasicinfo.FieldF21, emstockbasicinfo.FieldF22, emstockbasicinfo.FieldF23, emstockbasicinfo.FieldF24, emstockbasicinfo.FieldF25, emstockbasicinfo.FieldF26, emstockbasicinfo.FieldF27, emstockbasicinfo.FieldF28, emstockbasicinfo.FieldF29, emstockbasicinfo.FieldF30, emstockbasicinfo.FieldRemarks, emstockbasicinfo.FieldStatus:
			values[i] = new(sql.NullString)
		case emstockbasicinfo.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmStockBasicInfo fields.
func (esbi *EmStockBasicInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emstockbasicinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			esbi.ID = int32(value.Int64)
		case emstockbasicinfo.FieldF1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f1", values[i])
			} else if value.Valid {
				esbi.F1 = value.String
			}
		case emstockbasicinfo.FieldF2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f2", values[i])
			} else if value.Valid {
				esbi.F2 = value.String
			}
		case emstockbasicinfo.FieldF3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f3", values[i])
			} else if value.Valid {
				esbi.F3 = value.String
			}
		case emstockbasicinfo.FieldF4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f4", values[i])
			} else if value.Valid {
				esbi.F4 = value.String
			}
		case emstockbasicinfo.FieldF5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f5", values[i])
			} else if value.Valid {
				esbi.F5 = value.String
			}
		case emstockbasicinfo.FieldF6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f6", values[i])
			} else if value.Valid {
				esbi.F6 = value.String
			}
		case emstockbasicinfo.FieldF7:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f7", values[i])
			} else if value.Valid {
				esbi.F7 = value.String
			}
		case emstockbasicinfo.FieldF8:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f8", values[i])
			} else if value.Valid {
				esbi.F8 = value.String
			}
		case emstockbasicinfo.FieldF9:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f9", values[i])
			} else if value.Valid {
				esbi.F9 = value.String
			}
		case emstockbasicinfo.FieldF10:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f10", values[i])
			} else if value.Valid {
				esbi.F10 = value.String
			}
		case emstockbasicinfo.FieldF11:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f11", values[i])
			} else if value.Valid {
				esbi.F11 = value.String
			}
		case emstockbasicinfo.FieldF12:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f12", values[i])
			} else if value.Valid {
				esbi.F12 = value.String
			}
		case emstockbasicinfo.FieldF13:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f13", values[i])
			} else if value.Valid {
				esbi.F13 = value.String
			}
		case emstockbasicinfo.FieldF14:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f14", values[i])
			} else if value.Valid {
				esbi.F14 = value.String
			}
		case emstockbasicinfo.FieldF15:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f15", values[i])
			} else if value.Valid {
				esbi.F15 = value.String
			}
		case emstockbasicinfo.FieldF16:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f16", values[i])
			} else if value.Valid {
				esbi.F16 = value.String
			}
		case emstockbasicinfo.FieldF17:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f17", values[i])
			} else if value.Valid {
				esbi.F17 = value.String
			}
		case emstockbasicinfo.FieldF18:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f18", values[i])
			} else if value.Valid {
				esbi.F18 = value.String
			}
		case emstockbasicinfo.FieldF19:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f19", values[i])
			} else if value.Valid {
				esbi.F19 = value.String
			}
		case emstockbasicinfo.FieldF20:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f20", values[i])
			} else if value.Valid {
				esbi.F20 = value.String
			}
		case emstockbasicinfo.FieldF21:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f21", values[i])
			} else if value.Valid {
				esbi.F21 = value.String
			}
		case emstockbasicinfo.FieldF22:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f22", values[i])
			} else if value.Valid {
				esbi.F22 = value.String
			}
		case emstockbasicinfo.FieldF23:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f23", values[i])
			} else if value.Valid {
				esbi.F23 = value.String
			}
		case emstockbasicinfo.FieldF24:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f24", values[i])
			} else if value.Valid {
				esbi.F24 = value.String
			}
		case emstockbasicinfo.FieldF25:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f25", values[i])
			} else if value.Valid {
				esbi.F25 = value.String
			}
		case emstockbasicinfo.FieldF26:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f26", values[i])
			} else if value.Valid {
				esbi.F26 = value.String
			}
		case emstockbasicinfo.FieldF27:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f27", values[i])
			} else if value.Valid {
				esbi.F27 = value.String
			}
		case emstockbasicinfo.FieldF28:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f28", values[i])
			} else if value.Valid {
				esbi.F28 = value.String
			}
		case emstockbasicinfo.FieldF29:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f29", values[i])
			} else if value.Valid {
				esbi.F29 = value.String
			}
		case emstockbasicinfo.FieldF30:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f30", values[i])
			} else if value.Valid {
				esbi.F30 = value.String
			}
		case emstockbasicinfo.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				esbi.CreateTime = value.Time
			}
		case emstockbasicinfo.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				esbi.Remarks = value.String
			}
		case emstockbasicinfo.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				esbi.Status = value.String
			}
		case emstockbasicinfo.FieldSt1:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field st1", values[i])
			} else if value.Valid {
				esbi.St1 = int32(value.Int64)
			}
		case emstockbasicinfo.FieldSt2:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field st2", values[i])
			} else if value.Valid {
				esbi.St2 = int32(value.Int64)
			}
		case emstockbasicinfo.FieldSt3:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field st3", values[i])
			} else if value.Valid {
				esbi.St3 = int32(value.Int64)
			}
		case emstockbasicinfo.FieldSt4:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field st4", values[i])
			} else if value.Valid {
				esbi.St4 = int32(value.Int64)
			}
		case emstockbasicinfo.FieldSt5:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field st5", values[i])
			} else if value.Valid {
				esbi.St5 = int32(value.Int64)
			}
		default:
			esbi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmStockBasicInfo.
// This includes values selected through modifiers, order, etc.
func (esbi *EmStockBasicInfo) Value(name string) (ent.Value, error) {
	return esbi.selectValues.Get(name)
}

// Update returns a builder for updating this EmStockBasicInfo.
// Note that you need to call EmStockBasicInfo.Unwrap() before calling this method if this EmStockBasicInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (esbi *EmStockBasicInfo) Update() *EmStockBasicInfoUpdateOne {
	return NewEmStockBasicInfoClient(esbi.config).UpdateOne(esbi)
}

// Unwrap unwraps the EmStockBasicInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (esbi *EmStockBasicInfo) Unwrap() *EmStockBasicInfo {
	_tx, ok := esbi.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmStockBasicInfo is not a transactional entity")
	}
	esbi.config.driver = _tx.drv
	return esbi
}

// String implements the fmt.Stringer.
func (esbi *EmStockBasicInfo) String() string {
	var builder strings.Builder
	builder.WriteString("EmStockBasicInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", esbi.ID))
	builder.WriteString("f1=")
	builder.WriteString(esbi.F1)
	builder.WriteString(", ")
	builder.WriteString("f2=")
	builder.WriteString(esbi.F2)
	builder.WriteString(", ")
	builder.WriteString("f3=")
	builder.WriteString(esbi.F3)
	builder.WriteString(", ")
	builder.WriteString("f4=")
	builder.WriteString(esbi.F4)
	builder.WriteString(", ")
	builder.WriteString("f5=")
	builder.WriteString(esbi.F5)
	builder.WriteString(", ")
	builder.WriteString("f6=")
	builder.WriteString(esbi.F6)
	builder.WriteString(", ")
	builder.WriteString("f7=")
	builder.WriteString(esbi.F7)
	builder.WriteString(", ")
	builder.WriteString("f8=")
	builder.WriteString(esbi.F8)
	builder.WriteString(", ")
	builder.WriteString("f9=")
	builder.WriteString(esbi.F9)
	builder.WriteString(", ")
	builder.WriteString("f10=")
	builder.WriteString(esbi.F10)
	builder.WriteString(", ")
	builder.WriteString("f11=")
	builder.WriteString(esbi.F11)
	builder.WriteString(", ")
	builder.WriteString("f12=")
	builder.WriteString(esbi.F12)
	builder.WriteString(", ")
	builder.WriteString("f13=")
	builder.WriteString(esbi.F13)
	builder.WriteString(", ")
	builder.WriteString("f14=")
	builder.WriteString(esbi.F14)
	builder.WriteString(", ")
	builder.WriteString("f15=")
	builder.WriteString(esbi.F15)
	builder.WriteString(", ")
	builder.WriteString("f16=")
	builder.WriteString(esbi.F16)
	builder.WriteString(", ")
	builder.WriteString("f17=")
	builder.WriteString(esbi.F17)
	builder.WriteString(", ")
	builder.WriteString("f18=")
	builder.WriteString(esbi.F18)
	builder.WriteString(", ")
	builder.WriteString("f19=")
	builder.WriteString(esbi.F19)
	builder.WriteString(", ")
	builder.WriteString("f20=")
	builder.WriteString(esbi.F20)
	builder.WriteString(", ")
	builder.WriteString("f21=")
	builder.WriteString(esbi.F21)
	builder.WriteString(", ")
	builder.WriteString("f22=")
	builder.WriteString(esbi.F22)
	builder.WriteString(", ")
	builder.WriteString("f23=")
	builder.WriteString(esbi.F23)
	builder.WriteString(", ")
	builder.WriteString("f24=")
	builder.WriteString(esbi.F24)
	builder.WriteString(", ")
	builder.WriteString("f25=")
	builder.WriteString(esbi.F25)
	builder.WriteString(", ")
	builder.WriteString("f26=")
	builder.WriteString(esbi.F26)
	builder.WriteString(", ")
	builder.WriteString("f27=")
	builder.WriteString(esbi.F27)
	builder.WriteString(", ")
	builder.WriteString("f28=")
	builder.WriteString(esbi.F28)
	builder.WriteString(", ")
	builder.WriteString("f29=")
	builder.WriteString(esbi.F29)
	builder.WriteString(", ")
	builder.WriteString("f30=")
	builder.WriteString(esbi.F30)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(esbi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(esbi.Remarks)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(esbi.Status)
	builder.WriteString(", ")
	builder.WriteString("st1=")
	builder.WriteString(fmt.Sprintf("%v", esbi.St1))
	builder.WriteString(", ")
	builder.WriteString("st2=")
	builder.WriteString(fmt.Sprintf("%v", esbi.St2))
	builder.WriteString(", ")
	builder.WriteString("st3=")
	builder.WriteString(fmt.Sprintf("%v", esbi.St3))
	builder.WriteString(", ")
	builder.WriteString("st4=")
	builder.WriteString(fmt.Sprintf("%v", esbi.St4))
	builder.WriteString(", ")
	builder.WriteString("st5=")
	builder.WriteString(fmt.Sprintf("%v", esbi.St5))
	builder.WriteByte(')')
	return builder.String()
}

// EmStockBasicInfos is a parsable slice of EmStockBasicInfo.
type EmStockBasicInfos []*EmStockBasicInfo
