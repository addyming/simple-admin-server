// Code generated by ent, DO NOT EDIT.

package emstockbasicinfo

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the emstockbasicinfo type in the database.
	Label = "em_stock_basic_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "stock_basic_info_id"
	// FieldF1 holds the string denoting the f1 field in the database.
	FieldF1 = "f1"
	// FieldF2 holds the string denoting the f2 field in the database.
	FieldF2 = "f2"
	// FieldF3 holds the string denoting the f3 field in the database.
	FieldF3 = "f3"
	// FieldF4 holds the string denoting the f4 field in the database.
	FieldF4 = "f4"
	// FieldF5 holds the string denoting the f5 field in the database.
	FieldF5 = "f5"
	// FieldF6 holds the string denoting the f6 field in the database.
	FieldF6 = "f6"
	// FieldF7 holds the string denoting the f7 field in the database.
	FieldF7 = "f7"
	// FieldF8 holds the string denoting the f8 field in the database.
	FieldF8 = "f8"
	// FieldF9 holds the string denoting the f9 field in the database.
	FieldF9 = "f9"
	// FieldF10 holds the string denoting the f10 field in the database.
	FieldF10 = "f10"
	// FieldF11 holds the string denoting the f11 field in the database.
	FieldF11 = "f11"
	// FieldF12 holds the string denoting the f12 field in the database.
	FieldF12 = "f12"
	// FieldF13 holds the string denoting the f13 field in the database.
	FieldF13 = "f13"
	// FieldF14 holds the string denoting the f14 field in the database.
	FieldF14 = "f14"
	// FieldF15 holds the string denoting the f15 field in the database.
	FieldF15 = "f15"
	// FieldF16 holds the string denoting the f16 field in the database.
	FieldF16 = "f16"
	// FieldF17 holds the string denoting the f17 field in the database.
	FieldF17 = "f17"
	// FieldF18 holds the string denoting the f18 field in the database.
	FieldF18 = "f18"
	// FieldF19 holds the string denoting the f19 field in the database.
	FieldF19 = "f19"
	// FieldF20 holds the string denoting the f20 field in the database.
	FieldF20 = "f20"
	// FieldF21 holds the string denoting the f21 field in the database.
	FieldF21 = "f21"
	// FieldF22 holds the string denoting the f22 field in the database.
	FieldF22 = "f22"
	// FieldF23 holds the string denoting the f23 field in the database.
	FieldF23 = "f23"
	// FieldF24 holds the string denoting the f24 field in the database.
	FieldF24 = "f24"
	// FieldF25 holds the string denoting the f25 field in the database.
	FieldF25 = "f25"
	// FieldF26 holds the string denoting the f26 field in the database.
	FieldF26 = "f26"
	// FieldF27 holds the string denoting the f27 field in the database.
	FieldF27 = "f27"
	// FieldF28 holds the string denoting the f28 field in the database.
	FieldF28 = "f28"
	// FieldF29 holds the string denoting the f29 field in the database.
	FieldF29 = "f29"
	// FieldF30 holds the string denoting the f30 field in the database.
	FieldF30 = "f30"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSt1 holds the string denoting the st1 field in the database.
	FieldSt1 = "st1"
	// FieldSt2 holds the string denoting the st2 field in the database.
	FieldSt2 = "st2"
	// FieldSt3 holds the string denoting the st3 field in the database.
	FieldSt3 = "st3"
	// FieldSt4 holds the string denoting the st4 field in the database.
	FieldSt4 = "st4"
	// FieldSt5 holds the string denoting the st5 field in the database.
	FieldSt5 = "st5"
	// Table holds the table name of the emstockbasicinfo in the database.
	Table = "em_stock_basic_info"
)

// Columns holds all SQL columns for emstockbasicinfo fields.
var Columns = []string{
	FieldID,
	FieldF1,
	FieldF2,
	FieldF3,
	FieldF4,
	FieldF5,
	FieldF6,
	FieldF7,
	FieldF8,
	FieldF9,
	FieldF10,
	FieldF11,
	FieldF12,
	FieldF13,
	FieldF14,
	FieldF15,
	FieldF16,
	FieldF17,
	FieldF18,
	FieldF19,
	FieldF20,
	FieldF21,
	FieldF22,
	FieldF23,
	FieldF24,
	FieldF25,
	FieldF26,
	FieldF27,
	FieldF28,
	FieldF29,
	FieldF30,
	FieldCreateTime,
	FieldRemarks,
	FieldStatus,
	FieldSt1,
	FieldSt2,
	FieldSt3,
	FieldSt4,
	FieldSt5,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EmStockBasicInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByF1 orders the results by the f1 field.
func ByF1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF1, opts...).ToFunc()
}

// ByF2 orders the results by the f2 field.
func ByF2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF2, opts...).ToFunc()
}

// ByF3 orders the results by the f3 field.
func ByF3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF3, opts...).ToFunc()
}

// ByF4 orders the results by the f4 field.
func ByF4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF4, opts...).ToFunc()
}

// ByF5 orders the results by the f5 field.
func ByF5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF5, opts...).ToFunc()
}

// ByF6 orders the results by the f6 field.
func ByF6(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF6, opts...).ToFunc()
}

// ByF7 orders the results by the f7 field.
func ByF7(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF7, opts...).ToFunc()
}

// ByF8 orders the results by the f8 field.
func ByF8(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF8, opts...).ToFunc()
}

// ByF9 orders the results by the f9 field.
func ByF9(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF9, opts...).ToFunc()
}

// ByF10 orders the results by the f10 field.
func ByF10(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF10, opts...).ToFunc()
}

// ByF11 orders the results by the f11 field.
func ByF11(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF11, opts...).ToFunc()
}

// ByF12 orders the results by the f12 field.
func ByF12(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF12, opts...).ToFunc()
}

// ByF13 orders the results by the f13 field.
func ByF13(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF13, opts...).ToFunc()
}

// ByF14 orders the results by the f14 field.
func ByF14(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF14, opts...).ToFunc()
}

// ByF15 orders the results by the f15 field.
func ByF15(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF15, opts...).ToFunc()
}

// ByF16 orders the results by the f16 field.
func ByF16(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF16, opts...).ToFunc()
}

// ByF17 orders the results by the f17 field.
func ByF17(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF17, opts...).ToFunc()
}

// ByF18 orders the results by the f18 field.
func ByF18(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF18, opts...).ToFunc()
}

// ByF19 orders the results by the f19 field.
func ByF19(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF19, opts...).ToFunc()
}

// ByF20 orders the results by the f20 field.
func ByF20(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF20, opts...).ToFunc()
}

// ByF21 orders the results by the f21 field.
func ByF21(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF21, opts...).ToFunc()
}

// ByF22 orders the results by the f22 field.
func ByF22(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF22, opts...).ToFunc()
}

// ByF23 orders the results by the f23 field.
func ByF23(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF23, opts...).ToFunc()
}

// ByF24 orders the results by the f24 field.
func ByF24(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF24, opts...).ToFunc()
}

// ByF25 orders the results by the f25 field.
func ByF25(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF25, opts...).ToFunc()
}

// ByF26 orders the results by the f26 field.
func ByF26(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF26, opts...).ToFunc()
}

// ByF27 orders the results by the f27 field.
func ByF27(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF27, opts...).ToFunc()
}

// ByF28 orders the results by the f28 field.
func ByF28(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF28, opts...).ToFunc()
}

// ByF29 orders the results by the f29 field.
func ByF29(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF29, opts...).ToFunc()
}

// ByF30 orders the results by the f30 field.
func ByF30(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF30, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByRemarks orders the results by the remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySt1 orders the results by the st1 field.
func BySt1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSt1, opts...).ToFunc()
}

// BySt2 orders the results by the st2 field.
func BySt2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSt2, opts...).ToFunc()
}

// BySt3 orders the results by the st3 field.
func BySt3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSt3, opts...).ToFunc()
}

// BySt4 orders the results by the st4 field.
func BySt4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSt4, opts...).ToFunc()
}

// BySt5 orders the results by the st5 field.
func BySt5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSt5, opts...).ToFunc()
}
