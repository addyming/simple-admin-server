// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emfinancialindicator"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emstockbasicinfo"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emstockwatch"
)

const errInvalidPage = "INVALID_PAGE"

const (
	listField     = "list"
	pageNumField  = "pageNum"
	pageSizeField = "pageSize"
)

type PageDetails struct {
	Page  uint64 `json:"page"`
	Size  uint64 `json:"size"`
	Total uint64 `json:"total"`
}

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

const errInvalidPagination = "INVALID_PAGINATION"

type EmFinancialIndicatorPager struct {
	Order  emfinancialindicator.OrderOption
	Filter func(*EmFinancialIndicatorQuery) (*EmFinancialIndicatorQuery, error)
}

// EmFinancialIndicatorPaginateOption enables pagination customization.
type EmFinancialIndicatorPaginateOption func(*EmFinancialIndicatorPager)

// DefaultEmFinancialIndicatorOrder is the default ordering of EmFinancialIndicator.
var DefaultEmFinancialIndicatorOrder = Desc(emfinancialindicator.FieldID)

func newEmFinancialIndicatorPager(opts []EmFinancialIndicatorPaginateOption) (*EmFinancialIndicatorPager, error) {
	pager := &EmFinancialIndicatorPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultEmFinancialIndicatorOrder
	}
	return pager, nil
}

func (p *EmFinancialIndicatorPager) ApplyFilter(query *EmFinancialIndicatorQuery) (*EmFinancialIndicatorQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// EmFinancialIndicatorPageList is EmFinancialIndicator PageList result.
type EmFinancialIndicatorPageList struct {
	List        []*EmFinancialIndicator `json:"list"`
	PageDetails *PageDetails            `json:"pageDetails"`
}

func (efi *EmFinancialIndicatorQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...EmFinancialIndicatorPaginateOption,
) (*EmFinancialIndicatorPageList, error) {

	pager, err := newEmFinancialIndicatorPager(opts)
	if err != nil {
		return nil, err
	}

	if efi, err = pager.ApplyFilter(efi); err != nil {
		return nil, err
	}

	ret := &EmFinancialIndicatorPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := efi.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		efi = efi.Order(pager.Order)
	} else {
		efi = efi.Order(DefaultEmFinancialIndicatorOrder)
	}

	efi = efi.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := efi.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type EmStockBasicInfoPager struct {
	Order  emstockbasicinfo.OrderOption
	Filter func(*EmStockBasicInfoQuery) (*EmStockBasicInfoQuery, error)
}

// EmStockBasicInfoPaginateOption enables pagination customization.
type EmStockBasicInfoPaginateOption func(*EmStockBasicInfoPager)

// DefaultEmStockBasicInfoOrder is the default ordering of EmStockBasicInfo.
var DefaultEmStockBasicInfoOrder = Desc(emstockbasicinfo.FieldID)

func newEmStockBasicInfoPager(opts []EmStockBasicInfoPaginateOption) (*EmStockBasicInfoPager, error) {
	pager := &EmStockBasicInfoPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultEmStockBasicInfoOrder
	}
	return pager, nil
}

func (p *EmStockBasicInfoPager) ApplyFilter(query *EmStockBasicInfoQuery) (*EmStockBasicInfoQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// EmStockBasicInfoPageList is EmStockBasicInfo PageList result.
type EmStockBasicInfoPageList struct {
	List        []*EmStockBasicInfo `json:"list"`
	PageDetails *PageDetails        `json:"pageDetails"`
}

func (esbi *EmStockBasicInfoQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...EmStockBasicInfoPaginateOption,
) (*EmStockBasicInfoPageList, error) {

	pager, err := newEmStockBasicInfoPager(opts)
	if err != nil {
		return nil, err
	}

	if esbi, err = pager.ApplyFilter(esbi); err != nil {
		return nil, err
	}

	ret := &EmStockBasicInfoPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := esbi.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		esbi = esbi.Order(pager.Order)
	} else {
		esbi = esbi.Order(DefaultEmStockBasicInfoOrder)
	}

	esbi = esbi.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := esbi.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type EmStockWatchPager struct {
	Order  emstockwatch.OrderOption
	Filter func(*EmStockWatchQuery) (*EmStockWatchQuery, error)
}

// EmStockWatchPaginateOption enables pagination customization.
type EmStockWatchPaginateOption func(*EmStockWatchPager)

// DefaultEmStockWatchOrder is the default ordering of EmStockWatch.
var DefaultEmStockWatchOrder = Desc(emstockwatch.FieldID)

func newEmStockWatchPager(opts []EmStockWatchPaginateOption) (*EmStockWatchPager, error) {
	pager := &EmStockWatchPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultEmStockWatchOrder
	}
	return pager, nil
}

func (p *EmStockWatchPager) ApplyFilter(query *EmStockWatchQuery) (*EmStockWatchQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// EmStockWatchPageList is EmStockWatch PageList result.
type EmStockWatchPageList struct {
	List        []*EmStockWatch `json:"list"`
	PageDetails *PageDetails    `json:"pageDetails"`
}

func (esw *EmStockWatchQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...EmStockWatchPaginateOption,
) (*EmStockWatchPageList, error) {

	pager, err := newEmStockWatchPager(opts)
	if err != nil {
		return nil, err
	}

	if esw, err = pager.ApplyFilter(esw); err != nil {
		return nil, err
	}

	ret := &EmStockWatchPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := esw.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		esw = esw.Order(pager.Order)
	} else {
		esw = esw.Order(DefaultEmStockWatchOrder)
	}

	esw = esw.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := esw.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}
