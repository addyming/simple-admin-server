// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emstockwatch"
)

// EmStockWatchCreate is the builder for creating a EmStockWatch entity.
type EmStockWatchCreate struct {
	config
	mutation *EmStockWatchMutation
	hooks    []Hook
}

// SetStockWatchCode sets the "stock_watch_code" field.
func (eswc *EmStockWatchCreate) SetStockWatchCode(s string) *EmStockWatchCreate {
	eswc.mutation.SetStockWatchCode(s)
	return eswc
}

// SetNillableStockWatchCode sets the "stock_watch_code" field if the given value is not nil.
func (eswc *EmStockWatchCreate) SetNillableStockWatchCode(s *string) *EmStockWatchCreate {
	if s != nil {
		eswc.SetStockWatchCode(*s)
	}
	return eswc
}

// SetStockWatchName sets the "stock_watch_name" field.
func (eswc *EmStockWatchCreate) SetStockWatchName(s string) *EmStockWatchCreate {
	eswc.mutation.SetStockWatchName(s)
	return eswc
}

// SetNillableStockWatchName sets the "stock_watch_name" field if the given value is not nil.
func (eswc *EmStockWatchCreate) SetNillableStockWatchName(s *string) *EmStockWatchCreate {
	if s != nil {
		eswc.SetStockWatchName(*s)
	}
	return eswc
}

// SetStockWatchUpPrice sets the "stock_watch_up_price" field.
func (eswc *EmStockWatchCreate) SetStockWatchUpPrice(s string) *EmStockWatchCreate {
	eswc.mutation.SetStockWatchUpPrice(s)
	return eswc
}

// SetNillableStockWatchUpPrice sets the "stock_watch_up_price" field if the given value is not nil.
func (eswc *EmStockWatchCreate) SetNillableStockWatchUpPrice(s *string) *EmStockWatchCreate {
	if s != nil {
		eswc.SetStockWatchUpPrice(*s)
	}
	return eswc
}

// SetStockWatchFallPrice sets the "stock_watch_fall_price" field.
func (eswc *EmStockWatchCreate) SetStockWatchFallPrice(s string) *EmStockWatchCreate {
	eswc.mutation.SetStockWatchFallPrice(s)
	return eswc
}

// SetNillableStockWatchFallPrice sets the "stock_watch_fall_price" field if the given value is not nil.
func (eswc *EmStockWatchCreate) SetNillableStockWatchFallPrice(s *string) *EmStockWatchCreate {
	if s != nil {
		eswc.SetStockWatchFallPrice(*s)
	}
	return eswc
}

// SetStockWatchUpChange sets the "stock_watch_up_change" field.
func (eswc *EmStockWatchCreate) SetStockWatchUpChange(s string) *EmStockWatchCreate {
	eswc.mutation.SetStockWatchUpChange(s)
	return eswc
}

// SetNillableStockWatchUpChange sets the "stock_watch_up_change" field if the given value is not nil.
func (eswc *EmStockWatchCreate) SetNillableStockWatchUpChange(s *string) *EmStockWatchCreate {
	if s != nil {
		eswc.SetStockWatchUpChange(*s)
	}
	return eswc
}

// SetStockWatchFallChange sets the "stock_watch_fall_change" field.
func (eswc *EmStockWatchCreate) SetStockWatchFallChange(s string) *EmStockWatchCreate {
	eswc.mutation.SetStockWatchFallChange(s)
	return eswc
}

// SetNillableStockWatchFallChange sets the "stock_watch_fall_change" field if the given value is not nil.
func (eswc *EmStockWatchCreate) SetNillableStockWatchFallChange(s *string) *EmStockWatchCreate {
	if s != nil {
		eswc.SetStockWatchFallChange(*s)
	}
	return eswc
}

// SetID sets the "id" field.
func (eswc *EmStockWatchCreate) SetID(i int32) *EmStockWatchCreate {
	eswc.mutation.SetID(i)
	return eswc
}

// Mutation returns the EmStockWatchMutation object of the builder.
func (eswc *EmStockWatchCreate) Mutation() *EmStockWatchMutation {
	return eswc.mutation
}

// Save creates the EmStockWatch in the database.
func (eswc *EmStockWatchCreate) Save(ctx context.Context) (*EmStockWatch, error) {
	return withHooks(ctx, eswc.sqlSave, eswc.mutation, eswc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eswc *EmStockWatchCreate) SaveX(ctx context.Context) *EmStockWatch {
	v, err := eswc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eswc *EmStockWatchCreate) Exec(ctx context.Context) error {
	_, err := eswc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eswc *EmStockWatchCreate) ExecX(ctx context.Context) {
	if err := eswc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eswc *EmStockWatchCreate) check() error {
	return nil
}

func (eswc *EmStockWatchCreate) sqlSave(ctx context.Context) (*EmStockWatch, error) {
	if err := eswc.check(); err != nil {
		return nil, err
	}
	_node, _spec := eswc.createSpec()
	if err := sqlgraph.CreateNode(ctx, eswc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	eswc.mutation.id = &_node.ID
	eswc.mutation.done = true
	return _node, nil
}

func (eswc *EmStockWatchCreate) createSpec() (*EmStockWatch, *sqlgraph.CreateSpec) {
	var (
		_node = &EmStockWatch{config: eswc.config}
		_spec = sqlgraph.NewCreateSpec(emstockwatch.Table, sqlgraph.NewFieldSpec(emstockwatch.FieldID, field.TypeInt32))
	)
	if id, ok := eswc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eswc.mutation.StockWatchCode(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchCode, field.TypeString, value)
		_node.StockWatchCode = value
	}
	if value, ok := eswc.mutation.StockWatchName(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchName, field.TypeString, value)
		_node.StockWatchName = value
	}
	if value, ok := eswc.mutation.StockWatchUpPrice(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchUpPrice, field.TypeString, value)
		_node.StockWatchUpPrice = value
	}
	if value, ok := eswc.mutation.StockWatchFallPrice(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchFallPrice, field.TypeString, value)
		_node.StockWatchFallPrice = value
	}
	if value, ok := eswc.mutation.StockWatchUpChange(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchUpChange, field.TypeString, value)
		_node.StockWatchUpChange = value
	}
	if value, ok := eswc.mutation.StockWatchFallChange(); ok {
		_spec.SetField(emstockwatch.FieldStockWatchFallChange, field.TypeString, value)
		_node.StockWatchFallChange = value
	}
	return _node, _spec
}

// EmStockWatchCreateBulk is the builder for creating many EmStockWatch entities in bulk.
type EmStockWatchCreateBulk struct {
	config
	err      error
	builders []*EmStockWatchCreate
}

// Save creates the EmStockWatch entities in the database.
func (eswcb *EmStockWatchCreateBulk) Save(ctx context.Context) ([]*EmStockWatch, error) {
	if eswcb.err != nil {
		return nil, eswcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eswcb.builders))
	nodes := make([]*EmStockWatch, len(eswcb.builders))
	mutators := make([]Mutator, len(eswcb.builders))
	for i := range eswcb.builders {
		func(i int, root context.Context) {
			builder := eswcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmStockWatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eswcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eswcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eswcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eswcb *EmStockWatchCreateBulk) SaveX(ctx context.Context) []*EmStockWatch {
	v, err := eswcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eswcb *EmStockWatchCreateBulk) Exec(ctx context.Context) error {
	_, err := eswcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eswcb *EmStockWatchCreateBulk) ExecX(ctx context.Context) {
	if err := eswcb.Exec(ctx); err != nil {
		panic(err)
	}
}
