// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/suyuan32/simple-admin-efinance-rpc/ent/emstockwatch"
)

// EmStockWatch is the model entity for the EmStockWatch schema.
type EmStockWatch struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// StockWatchCode holds the value of the "stock_watch_code" field.
	StockWatchCode string `json:"stock_watch_code,omitempty"`
	// StockWatchName holds the value of the "stock_watch_name" field.
	StockWatchName string `json:"stock_watch_name,omitempty"`
	// StockWatchUpPrice holds the value of the "stock_watch_up_price" field.
	StockWatchUpPrice string `json:"stock_watch_up_price,omitempty"`
	// StockWatchFallPrice holds the value of the "stock_watch_fall_price" field.
	StockWatchFallPrice string `json:"stock_watch_fall_price,omitempty"`
	// StockWatchUpChange holds the value of the "stock_watch_up_change" field.
	StockWatchUpChange string `json:"stock_watch_up_change,omitempty"`
	// StockWatchFallChange holds the value of the "stock_watch_fall_change" field.
	StockWatchFallChange string `json:"stock_watch_fall_change,omitempty"`
	selectValues         sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmStockWatch) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emstockwatch.FieldID:
			values[i] = new(sql.NullInt64)
		case emstockwatch.FieldStockWatchCode, emstockwatch.FieldStockWatchName, emstockwatch.FieldStockWatchUpPrice, emstockwatch.FieldStockWatchFallPrice, emstockwatch.FieldStockWatchUpChange, emstockwatch.FieldStockWatchFallChange:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmStockWatch fields.
func (esw *EmStockWatch) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emstockwatch.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			esw.ID = int32(value.Int64)
		case emstockwatch.FieldStockWatchCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stock_watch_code", values[i])
			} else if value.Valid {
				esw.StockWatchCode = value.String
			}
		case emstockwatch.FieldStockWatchName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stock_watch_name", values[i])
			} else if value.Valid {
				esw.StockWatchName = value.String
			}
		case emstockwatch.FieldStockWatchUpPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stock_watch_up_price", values[i])
			} else if value.Valid {
				esw.StockWatchUpPrice = value.String
			}
		case emstockwatch.FieldStockWatchFallPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stock_watch_fall_price", values[i])
			} else if value.Valid {
				esw.StockWatchFallPrice = value.String
			}
		case emstockwatch.FieldStockWatchUpChange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stock_watch_up_change", values[i])
			} else if value.Valid {
				esw.StockWatchUpChange = value.String
			}
		case emstockwatch.FieldStockWatchFallChange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stock_watch_fall_change", values[i])
			} else if value.Valid {
				esw.StockWatchFallChange = value.String
			}
		default:
			esw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmStockWatch.
// This includes values selected through modifiers, order, etc.
func (esw *EmStockWatch) Value(name string) (ent.Value, error) {
	return esw.selectValues.Get(name)
}

// Update returns a builder for updating this EmStockWatch.
// Note that you need to call EmStockWatch.Unwrap() before calling this method if this EmStockWatch
// was returned from a transaction, and the transaction was committed or rolled back.
func (esw *EmStockWatch) Update() *EmStockWatchUpdateOne {
	return NewEmStockWatchClient(esw.config).UpdateOne(esw)
}

// Unwrap unwraps the EmStockWatch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (esw *EmStockWatch) Unwrap() *EmStockWatch {
	_tx, ok := esw.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmStockWatch is not a transactional entity")
	}
	esw.config.driver = _tx.drv
	return esw
}

// String implements the fmt.Stringer.
func (esw *EmStockWatch) String() string {
	var builder strings.Builder
	builder.WriteString("EmStockWatch(")
	builder.WriteString(fmt.Sprintf("id=%v, ", esw.ID))
	builder.WriteString("stock_watch_code=")
	builder.WriteString(esw.StockWatchCode)
	builder.WriteString(", ")
	builder.WriteString("stock_watch_name=")
	builder.WriteString(esw.StockWatchName)
	builder.WriteString(", ")
	builder.WriteString("stock_watch_up_price=")
	builder.WriteString(esw.StockWatchUpPrice)
	builder.WriteString(", ")
	builder.WriteString("stock_watch_fall_price=")
	builder.WriteString(esw.StockWatchFallPrice)
	builder.WriteString(", ")
	builder.WriteString("stock_watch_up_change=")
	builder.WriteString(esw.StockWatchUpChange)
	builder.WriteString(", ")
	builder.WriteString("stock_watch_fall_change=")
	builder.WriteString(esw.StockWatchFallChange)
	builder.WriteByte(')')
	return builder.String()
}

// EmStockWatches is a parsable slice of EmStockWatch.
type EmStockWatches []*EmStockWatch
