// Code generated by goctl. DO NOT EDIT.
// Source: efinance.proto

package efinanceclient

import (
	"context"

	"github.com/suyuan32/simple-admin-efinance-rpc/types/efinance"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDInt32Resp              = efinance.BaseIDInt32Resp
	BaseIDInt64Resp              = efinance.BaseIDInt64Resp
	BaseIDResp                   = efinance.BaseIDResp
	BaseIDStringResp             = efinance.BaseIDStringResp
	BaseIDUint32Resp             = efinance.BaseIDUint32Resp
	BaseResp                     = efinance.BaseResp
	BaseUUIDResp                 = efinance.BaseUUIDResp
	EmFinancialIndicatorInfo     = efinance.EmFinancialIndicatorInfo
	EmFinancialIndicatorListReq  = efinance.EmFinancialIndicatorListReq
	EmFinancialIndicatorListResp = efinance.EmFinancialIndicatorListResp
	EmStockBasicInfoInfo         = efinance.EmStockBasicInfoInfo
	EmStockBasicInfoListReq      = efinance.EmStockBasicInfoListReq
	EmStockBasicInfoListResp     = efinance.EmStockBasicInfoListResp
	EmStockWatchInfo             = efinance.EmStockWatchInfo
	EmStockWatchListReq          = efinance.EmStockWatchListReq
	EmStockWatchListResp         = efinance.EmStockWatchListResp
	Empty                        = efinance.Empty
	IDInt32Req                   = efinance.IDInt32Req
	IDInt64Req                   = efinance.IDInt64Req
	IDReq                        = efinance.IDReq
	IDStringReq                  = efinance.IDStringReq
	IDUint32Req                  = efinance.IDUint32Req
	IDsInt32Req                  = efinance.IDsInt32Req
	IDsInt64Req                  = efinance.IDsInt64Req
	IDsReq                       = efinance.IDsReq
	IDsStringReq                 = efinance.IDsStringReq
	IDsUint32Req                 = efinance.IDsUint32Req
	PageInfoReq                  = efinance.PageInfoReq
	UUIDReq                      = efinance.UUIDReq
	UUIDsReq                     = efinance.UUIDsReq

	Efinance interface {
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		// EmFinancialIndicator management
		CreateEmFinancialIndicator(ctx context.Context, in *EmFinancialIndicatorInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error)
		UpdateEmFinancialIndicator(ctx context.Context, in *EmFinancialIndicatorInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetEmFinancialIndicatorList(ctx context.Context, in *EmFinancialIndicatorListReq, opts ...grpc.CallOption) (*EmFinancialIndicatorListResp, error)
		GetEmFinancialIndicatorById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmFinancialIndicatorInfo, error)
		DeleteEmFinancialIndicator(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error)
		// EmStockBasicInfo management
		CreateEmStockBasicInfo(ctx context.Context, in *EmStockBasicInfoInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error)
		UpdateEmStockBasicInfo(ctx context.Context, in *EmStockBasicInfoInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetEmStockBasicInfoList(ctx context.Context, in *EmStockBasicInfoListReq, opts ...grpc.CallOption) (*EmStockBasicInfoListResp, error)
		GetEmStockBasicInfoById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmStockBasicInfoInfo, error)
		DeleteEmStockBasicInfo(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error)
		// EmStockWatch management
		CreateEmStockWatch(ctx context.Context, in *EmStockWatchInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error)
		UpdateEmStockWatch(ctx context.Context, in *EmStockWatchInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetEmStockWatchList(ctx context.Context, in *EmStockWatchListReq, opts ...grpc.CallOption) (*EmStockWatchListResp, error)
		GetEmStockWatchById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmStockWatchInfo, error)
		DeleteEmStockWatch(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultEfinance struct {
		cli zrpc.Client
	}
)

func NewEfinance(cli zrpc.Client) Efinance {
	return &defaultEfinance{
		cli: cli,
	}
}

func (m *defaultEfinance) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

// EmFinancialIndicator management
func (m *defaultEfinance) CreateEmFinancialIndicator(ctx context.Context, in *EmFinancialIndicatorInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.CreateEmFinancialIndicator(ctx, in, opts...)
}

func (m *defaultEfinance) UpdateEmFinancialIndicator(ctx context.Context, in *EmFinancialIndicatorInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.UpdateEmFinancialIndicator(ctx, in, opts...)
}

func (m *defaultEfinance) GetEmFinancialIndicatorList(ctx context.Context, in *EmFinancialIndicatorListReq, opts ...grpc.CallOption) (*EmFinancialIndicatorListResp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.GetEmFinancialIndicatorList(ctx, in, opts...)
}

func (m *defaultEfinance) GetEmFinancialIndicatorById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmFinancialIndicatorInfo, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.GetEmFinancialIndicatorById(ctx, in, opts...)
}

func (m *defaultEfinance) DeleteEmFinancialIndicator(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.DeleteEmFinancialIndicator(ctx, in, opts...)
}

// EmStockBasicInfo management
func (m *defaultEfinance) CreateEmStockBasicInfo(ctx context.Context, in *EmStockBasicInfoInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.CreateEmStockBasicInfo(ctx, in, opts...)
}

func (m *defaultEfinance) UpdateEmStockBasicInfo(ctx context.Context, in *EmStockBasicInfoInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.UpdateEmStockBasicInfo(ctx, in, opts...)
}

func (m *defaultEfinance) GetEmStockBasicInfoList(ctx context.Context, in *EmStockBasicInfoListReq, opts ...grpc.CallOption) (*EmStockBasicInfoListResp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.GetEmStockBasicInfoList(ctx, in, opts...)
}

func (m *defaultEfinance) GetEmStockBasicInfoById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmStockBasicInfoInfo, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.GetEmStockBasicInfoById(ctx, in, opts...)
}

func (m *defaultEfinance) DeleteEmStockBasicInfo(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.DeleteEmStockBasicInfo(ctx, in, opts...)
}

// EmStockWatch management
func (m *defaultEfinance) CreateEmStockWatch(ctx context.Context, in *EmStockWatchInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.CreateEmStockWatch(ctx, in, opts...)
}

func (m *defaultEfinance) UpdateEmStockWatch(ctx context.Context, in *EmStockWatchInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.UpdateEmStockWatch(ctx, in, opts...)
}

func (m *defaultEfinance) GetEmStockWatchList(ctx context.Context, in *EmStockWatchListReq, opts ...grpc.CallOption) (*EmStockWatchListResp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.GetEmStockWatchList(ctx, in, opts...)
}

func (m *defaultEfinance) GetEmStockWatchById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmStockWatchInfo, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.GetEmStockWatchById(ctx, in, opts...)
}

func (m *defaultEfinance) DeleteEmStockWatch(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error) {
	client := efinance.NewEfinanceClient(m.cli.Conn())
	return client.DeleteEmStockWatch(ctx, in, opts...)
}
