// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: efinance.proto

package efinance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Efinance_InitDatabase_FullMethodName                = "/efinance.Efinance/initDatabase"
	Efinance_CreateEmFinancialIndicator_FullMethodName  = "/efinance.Efinance/createEmFinancialIndicator"
	Efinance_UpdateEmFinancialIndicator_FullMethodName  = "/efinance.Efinance/updateEmFinancialIndicator"
	Efinance_GetEmFinancialIndicatorList_FullMethodName = "/efinance.Efinance/getEmFinancialIndicatorList"
	Efinance_GetEmFinancialIndicatorById_FullMethodName = "/efinance.Efinance/getEmFinancialIndicatorById"
	Efinance_DeleteEmFinancialIndicator_FullMethodName  = "/efinance.Efinance/deleteEmFinancialIndicator"
	Efinance_CreateEmStockBasicInfo_FullMethodName      = "/efinance.Efinance/createEmStockBasicInfo"
	Efinance_UpdateEmStockBasicInfo_FullMethodName      = "/efinance.Efinance/updateEmStockBasicInfo"
	Efinance_GetEmStockBasicInfoList_FullMethodName     = "/efinance.Efinance/getEmStockBasicInfoList"
	Efinance_GetEmStockBasicInfoById_FullMethodName     = "/efinance.Efinance/getEmStockBasicInfoById"
	Efinance_DeleteEmStockBasicInfo_FullMethodName      = "/efinance.Efinance/deleteEmStockBasicInfo"
	Efinance_CreateEmStockWatch_FullMethodName          = "/efinance.Efinance/createEmStockWatch"
	Efinance_UpdateEmStockWatch_FullMethodName          = "/efinance.Efinance/updateEmStockWatch"
	Efinance_GetEmStockWatchList_FullMethodName         = "/efinance.Efinance/getEmStockWatchList"
	Efinance_GetEmStockWatchById_FullMethodName         = "/efinance.Efinance/getEmStockWatchById"
	Efinance_DeleteEmStockWatch_FullMethodName          = "/efinance.Efinance/deleteEmStockWatch"
)

// EfinanceClient is the client API for Efinance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EfinanceClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// EmFinancialIndicator management
	// group: emfinancialindicator
	CreateEmFinancialIndicator(ctx context.Context, in *EmFinancialIndicatorInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error)
	// group: emfinancialindicator
	UpdateEmFinancialIndicator(ctx context.Context, in *EmFinancialIndicatorInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: emfinancialindicator
	GetEmFinancialIndicatorList(ctx context.Context, in *EmFinancialIndicatorListReq, opts ...grpc.CallOption) (*EmFinancialIndicatorListResp, error)
	// group: emfinancialindicator
	GetEmFinancialIndicatorById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmFinancialIndicatorInfo, error)
	// group: emfinancialindicator
	DeleteEmFinancialIndicator(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error)
	// EmStockBasicInfo management
	// group: emstockbasicinfo
	CreateEmStockBasicInfo(ctx context.Context, in *EmStockBasicInfoInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error)
	// group: emstockbasicinfo
	UpdateEmStockBasicInfo(ctx context.Context, in *EmStockBasicInfoInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: emstockbasicinfo
	GetEmStockBasicInfoList(ctx context.Context, in *EmStockBasicInfoListReq, opts ...grpc.CallOption) (*EmStockBasicInfoListResp, error)
	// group: emstockbasicinfo
	GetEmStockBasicInfoById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmStockBasicInfoInfo, error)
	// group: emstockbasicinfo
	DeleteEmStockBasicInfo(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error)
	// EmStockWatch management
	// group: emstockwatch
	CreateEmStockWatch(ctx context.Context, in *EmStockWatchInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error)
	// group: emstockwatch
	UpdateEmStockWatch(ctx context.Context, in *EmStockWatchInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: emstockwatch
	GetEmStockWatchList(ctx context.Context, in *EmStockWatchListReq, opts ...grpc.CallOption) (*EmStockWatchListResp, error)
	// group: emstockwatch
	GetEmStockWatchById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmStockWatchInfo, error)
	// group: emstockwatch
	DeleteEmStockWatch(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error)
}

type efinanceClient struct {
	cc grpc.ClientConnInterface
}

func NewEfinanceClient(cc grpc.ClientConnInterface) EfinanceClient {
	return &efinanceClient{cc}
}

func (c *efinanceClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Efinance_InitDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) CreateEmFinancialIndicator(ctx context.Context, in *EmFinancialIndicatorInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDInt32Resp)
	err := c.cc.Invoke(ctx, Efinance_CreateEmFinancialIndicator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) UpdateEmFinancialIndicator(ctx context.Context, in *EmFinancialIndicatorInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Efinance_UpdateEmFinancialIndicator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) GetEmFinancialIndicatorList(ctx context.Context, in *EmFinancialIndicatorListReq, opts ...grpc.CallOption) (*EmFinancialIndicatorListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmFinancialIndicatorListResp)
	err := c.cc.Invoke(ctx, Efinance_GetEmFinancialIndicatorList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) GetEmFinancialIndicatorById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmFinancialIndicatorInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmFinancialIndicatorInfo)
	err := c.cc.Invoke(ctx, Efinance_GetEmFinancialIndicatorById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) DeleteEmFinancialIndicator(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Efinance_DeleteEmFinancialIndicator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) CreateEmStockBasicInfo(ctx context.Context, in *EmStockBasicInfoInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDInt32Resp)
	err := c.cc.Invoke(ctx, Efinance_CreateEmStockBasicInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) UpdateEmStockBasicInfo(ctx context.Context, in *EmStockBasicInfoInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Efinance_UpdateEmStockBasicInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) GetEmStockBasicInfoList(ctx context.Context, in *EmStockBasicInfoListReq, opts ...grpc.CallOption) (*EmStockBasicInfoListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmStockBasicInfoListResp)
	err := c.cc.Invoke(ctx, Efinance_GetEmStockBasicInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) GetEmStockBasicInfoById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmStockBasicInfoInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmStockBasicInfoInfo)
	err := c.cc.Invoke(ctx, Efinance_GetEmStockBasicInfoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) DeleteEmStockBasicInfo(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Efinance_DeleteEmStockBasicInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) CreateEmStockWatch(ctx context.Context, in *EmStockWatchInfo, opts ...grpc.CallOption) (*BaseIDInt32Resp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDInt32Resp)
	err := c.cc.Invoke(ctx, Efinance_CreateEmStockWatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) UpdateEmStockWatch(ctx context.Context, in *EmStockWatchInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Efinance_UpdateEmStockWatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) GetEmStockWatchList(ctx context.Context, in *EmStockWatchListReq, opts ...grpc.CallOption) (*EmStockWatchListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmStockWatchListResp)
	err := c.cc.Invoke(ctx, Efinance_GetEmStockWatchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) GetEmStockWatchById(ctx context.Context, in *IDInt32Req, opts ...grpc.CallOption) (*EmStockWatchInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmStockWatchInfo)
	err := c.cc.Invoke(ctx, Efinance_GetEmStockWatchById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *efinanceClient) DeleteEmStockWatch(ctx context.Context, in *IDsInt32Req, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Efinance_DeleteEmStockWatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EfinanceServer is the server API for Efinance service.
// All implementations must embed UnimplementedEfinanceServer
// for forward compatibility.
type EfinanceServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// EmFinancialIndicator management
	// group: emfinancialindicator
	CreateEmFinancialIndicator(context.Context, *EmFinancialIndicatorInfo) (*BaseIDInt32Resp, error)
	// group: emfinancialindicator
	UpdateEmFinancialIndicator(context.Context, *EmFinancialIndicatorInfo) (*BaseResp, error)
	// group: emfinancialindicator
	GetEmFinancialIndicatorList(context.Context, *EmFinancialIndicatorListReq) (*EmFinancialIndicatorListResp, error)
	// group: emfinancialindicator
	GetEmFinancialIndicatorById(context.Context, *IDInt32Req) (*EmFinancialIndicatorInfo, error)
	// group: emfinancialindicator
	DeleteEmFinancialIndicator(context.Context, *IDsInt32Req) (*BaseResp, error)
	// EmStockBasicInfo management
	// group: emstockbasicinfo
	CreateEmStockBasicInfo(context.Context, *EmStockBasicInfoInfo) (*BaseIDInt32Resp, error)
	// group: emstockbasicinfo
	UpdateEmStockBasicInfo(context.Context, *EmStockBasicInfoInfo) (*BaseResp, error)
	// group: emstockbasicinfo
	GetEmStockBasicInfoList(context.Context, *EmStockBasicInfoListReq) (*EmStockBasicInfoListResp, error)
	// group: emstockbasicinfo
	GetEmStockBasicInfoById(context.Context, *IDInt32Req) (*EmStockBasicInfoInfo, error)
	// group: emstockbasicinfo
	DeleteEmStockBasicInfo(context.Context, *IDsInt32Req) (*BaseResp, error)
	// EmStockWatch management
	// group: emstockwatch
	CreateEmStockWatch(context.Context, *EmStockWatchInfo) (*BaseIDInt32Resp, error)
	// group: emstockwatch
	UpdateEmStockWatch(context.Context, *EmStockWatchInfo) (*BaseResp, error)
	// group: emstockwatch
	GetEmStockWatchList(context.Context, *EmStockWatchListReq) (*EmStockWatchListResp, error)
	// group: emstockwatch
	GetEmStockWatchById(context.Context, *IDInt32Req) (*EmStockWatchInfo, error)
	// group: emstockwatch
	DeleteEmStockWatch(context.Context, *IDsInt32Req) (*BaseResp, error)
	mustEmbedUnimplementedEfinanceServer()
}

// UnimplementedEfinanceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEfinanceServer struct{}

func (UnimplementedEfinanceServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedEfinanceServer) CreateEmFinancialIndicator(context.Context, *EmFinancialIndicatorInfo) (*BaseIDInt32Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmFinancialIndicator not implemented")
}
func (UnimplementedEfinanceServer) UpdateEmFinancialIndicator(context.Context, *EmFinancialIndicatorInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmFinancialIndicator not implemented")
}
func (UnimplementedEfinanceServer) GetEmFinancialIndicatorList(context.Context, *EmFinancialIndicatorListReq) (*EmFinancialIndicatorListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmFinancialIndicatorList not implemented")
}
func (UnimplementedEfinanceServer) GetEmFinancialIndicatorById(context.Context, *IDInt32Req) (*EmFinancialIndicatorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmFinancialIndicatorById not implemented")
}
func (UnimplementedEfinanceServer) DeleteEmFinancialIndicator(context.Context, *IDsInt32Req) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmFinancialIndicator not implemented")
}
func (UnimplementedEfinanceServer) CreateEmStockBasicInfo(context.Context, *EmStockBasicInfoInfo) (*BaseIDInt32Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmStockBasicInfo not implemented")
}
func (UnimplementedEfinanceServer) UpdateEmStockBasicInfo(context.Context, *EmStockBasicInfoInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmStockBasicInfo not implemented")
}
func (UnimplementedEfinanceServer) GetEmStockBasicInfoList(context.Context, *EmStockBasicInfoListReq) (*EmStockBasicInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmStockBasicInfoList not implemented")
}
func (UnimplementedEfinanceServer) GetEmStockBasicInfoById(context.Context, *IDInt32Req) (*EmStockBasicInfoInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmStockBasicInfoById not implemented")
}
func (UnimplementedEfinanceServer) DeleteEmStockBasicInfo(context.Context, *IDsInt32Req) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmStockBasicInfo not implemented")
}
func (UnimplementedEfinanceServer) CreateEmStockWatch(context.Context, *EmStockWatchInfo) (*BaseIDInt32Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmStockWatch not implemented")
}
func (UnimplementedEfinanceServer) UpdateEmStockWatch(context.Context, *EmStockWatchInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmStockWatch not implemented")
}
func (UnimplementedEfinanceServer) GetEmStockWatchList(context.Context, *EmStockWatchListReq) (*EmStockWatchListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmStockWatchList not implemented")
}
func (UnimplementedEfinanceServer) GetEmStockWatchById(context.Context, *IDInt32Req) (*EmStockWatchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmStockWatchById not implemented")
}
func (UnimplementedEfinanceServer) DeleteEmStockWatch(context.Context, *IDsInt32Req) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmStockWatch not implemented")
}
func (UnimplementedEfinanceServer) mustEmbedUnimplementedEfinanceServer() {}
func (UnimplementedEfinanceServer) testEmbeddedByValue()                  {}

// UnsafeEfinanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EfinanceServer will
// result in compilation errors.
type UnsafeEfinanceServer interface {
	mustEmbedUnimplementedEfinanceServer()
}

func RegisterEfinanceServer(s grpc.ServiceRegistrar, srv EfinanceServer) {
	// If the following call pancis, it indicates UnimplementedEfinanceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Efinance_ServiceDesc, srv)
}

func _Efinance_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_CreateEmFinancialIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmFinancialIndicatorInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).CreateEmFinancialIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_CreateEmFinancialIndicator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).CreateEmFinancialIndicator(ctx, req.(*EmFinancialIndicatorInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_UpdateEmFinancialIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmFinancialIndicatorInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).UpdateEmFinancialIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_UpdateEmFinancialIndicator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).UpdateEmFinancialIndicator(ctx, req.(*EmFinancialIndicatorInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_GetEmFinancialIndicatorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmFinancialIndicatorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).GetEmFinancialIndicatorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_GetEmFinancialIndicatorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).GetEmFinancialIndicatorList(ctx, req.(*EmFinancialIndicatorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_GetEmFinancialIndicatorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDInt32Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).GetEmFinancialIndicatorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_GetEmFinancialIndicatorById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).GetEmFinancialIndicatorById(ctx, req.(*IDInt32Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_DeleteEmFinancialIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsInt32Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).DeleteEmFinancialIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_DeleteEmFinancialIndicator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).DeleteEmFinancialIndicator(ctx, req.(*IDsInt32Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_CreateEmStockBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmStockBasicInfoInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).CreateEmStockBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_CreateEmStockBasicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).CreateEmStockBasicInfo(ctx, req.(*EmStockBasicInfoInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_UpdateEmStockBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmStockBasicInfoInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).UpdateEmStockBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_UpdateEmStockBasicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).UpdateEmStockBasicInfo(ctx, req.(*EmStockBasicInfoInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_GetEmStockBasicInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmStockBasicInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).GetEmStockBasicInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_GetEmStockBasicInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).GetEmStockBasicInfoList(ctx, req.(*EmStockBasicInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_GetEmStockBasicInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDInt32Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).GetEmStockBasicInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_GetEmStockBasicInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).GetEmStockBasicInfoById(ctx, req.(*IDInt32Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_DeleteEmStockBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsInt32Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).DeleteEmStockBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_DeleteEmStockBasicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).DeleteEmStockBasicInfo(ctx, req.(*IDsInt32Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_CreateEmStockWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmStockWatchInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).CreateEmStockWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_CreateEmStockWatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).CreateEmStockWatch(ctx, req.(*EmStockWatchInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_UpdateEmStockWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmStockWatchInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).UpdateEmStockWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_UpdateEmStockWatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).UpdateEmStockWatch(ctx, req.(*EmStockWatchInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_GetEmStockWatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmStockWatchListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).GetEmStockWatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_GetEmStockWatchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).GetEmStockWatchList(ctx, req.(*EmStockWatchListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_GetEmStockWatchById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDInt32Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).GetEmStockWatchById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_GetEmStockWatchById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).GetEmStockWatchById(ctx, req.(*IDInt32Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Efinance_DeleteEmStockWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsInt32Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EfinanceServer).DeleteEmStockWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Efinance_DeleteEmStockWatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EfinanceServer).DeleteEmStockWatch(ctx, req.(*IDsInt32Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Efinance_ServiceDesc is the grpc.ServiceDesc for Efinance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Efinance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "efinance.Efinance",
	HandlerType: (*EfinanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Efinance_InitDatabase_Handler,
		},
		{
			MethodName: "createEmFinancialIndicator",
			Handler:    _Efinance_CreateEmFinancialIndicator_Handler,
		},
		{
			MethodName: "updateEmFinancialIndicator",
			Handler:    _Efinance_UpdateEmFinancialIndicator_Handler,
		},
		{
			MethodName: "getEmFinancialIndicatorList",
			Handler:    _Efinance_GetEmFinancialIndicatorList_Handler,
		},
		{
			MethodName: "getEmFinancialIndicatorById",
			Handler:    _Efinance_GetEmFinancialIndicatorById_Handler,
		},
		{
			MethodName: "deleteEmFinancialIndicator",
			Handler:    _Efinance_DeleteEmFinancialIndicator_Handler,
		},
		{
			MethodName: "createEmStockBasicInfo",
			Handler:    _Efinance_CreateEmStockBasicInfo_Handler,
		},
		{
			MethodName: "updateEmStockBasicInfo",
			Handler:    _Efinance_UpdateEmStockBasicInfo_Handler,
		},
		{
			MethodName: "getEmStockBasicInfoList",
			Handler:    _Efinance_GetEmStockBasicInfoList_Handler,
		},
		{
			MethodName: "getEmStockBasicInfoById",
			Handler:    _Efinance_GetEmStockBasicInfoById_Handler,
		},
		{
			MethodName: "deleteEmStockBasicInfo",
			Handler:    _Efinance_DeleteEmStockBasicInfo_Handler,
		},
		{
			MethodName: "createEmStockWatch",
			Handler:    _Efinance_CreateEmStockWatch_Handler,
		},
		{
			MethodName: "updateEmStockWatch",
			Handler:    _Efinance_UpdateEmStockWatch_Handler,
		},
		{
			MethodName: "getEmStockWatchList",
			Handler:    _Efinance_GetEmStockWatchList_Handler,
		},
		{
			MethodName: "getEmStockWatchById",
			Handler:    _Efinance_GetEmStockWatchById_Handler,
		},
		{
			MethodName: "deleteEmStockWatch",
			Handler:    _Efinance_DeleteEmStockWatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "efinance.proto",
}
